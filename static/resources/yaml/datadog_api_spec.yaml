components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    AWSAccount:
      properties:
        access_key_id:
          type: string
        account_id:
          example: '1234567'
          type: string
        account_specific_namespace_rules:
          additionalProperties:
            type: boolean
          example: false
          type: object
        filter_tags:
          example:
          - <KEY>:<VALUE>
          items:
            type: string
          type: array
        host_tags:
          example:
          - <KEY>:<VALUE>
          items:
            type: string
          type: array
        role_name:
          example: DatadogAWSIntegrationRole
          type: string
      type: object
    AWSAccountAndLambdaRequest:
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        lambda_arn:
          description: ARN of the Datadog Lambda created during the Datadog-Amazon
            Web services Log collection setup.
          example: arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
          type: string
      required:
      - account_id
      - lambda_arn
      type: object
    AWSAccountCreateResponse:
      properties:
        external_id:
          type: string
      type: object
    AWSAccountListResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/AWSAccount'
          type: array
      type: object
    AWSLogsAsyncResponse:
      properties:
        errors:
          items:
            properties:
              code:
                example: no_such_config
                type: string
              message:
                example: AWS account 12345 has no lambda config to update
                type: string
            type: object
          type: array
        status:
          example: created
          type: string
      type: object
    AWSLogsListResponse:
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        lambdas:
          description: List of ARNs configured in your Datadog account.
          example:
          - arn: arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
          items:
            properties:
              arn:
                type: string
            type: object
          type: array
        services:
          description: Array of services IDs.
          example:
          - s3
          - elb
          - elbv2
          - cloudfront
          - redshift
          - lambda
          items:
            type: string
          type: array
      type: object
    AWSLogsListServicesResponse:
      properties:
        id:
          description: Key value in returned object.
          example: s3
          type: string
        label:
          description: Name of service available for configuration with Datadog logs.
          example: S3 Access Logs
          type: string
      type: object
    AWSLogsServicesRequest:
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        services:
          description: Array of services IDs set to enable automatic log collection.
            Discover the list of available services with the Get list of AWS log ready
            services API endpoint
          example:
          - s3
          - elb
          - elbv2
          - cloudfront
          - redshift
          - lambda
          items:
            type: string
          type: array
      required:
      - account_id
      - services
      type: object
    ApiKey:
      properties:
        created:
          example: '2019-08-02 15:31:07'
          readOnly: true
          type: string
        created_by:
          example: example.com
          readOnly: true
          type: string
        key:
          example: 1234512345123456abcabc912349abcd
          maxLength: 32
          minLength: 32
          readOnly: true
          type: string
        name:
          example: example user
          type: string
      type: object
    ApiKeyListResponse:
      example:
        api_keys:
        - created_by: test_user
          key: 1234512345123456abcabc912349abcd
          name: app_key
      properties:
        api_keys:
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      type: object
    ApiKeyResponse:
      example:
        api_key:
          created_by: test_user
          key: 1234512345123456abcabc912349abcd
          name: app_key
      properties:
        api_key:
          $ref: '#/components/schemas/ApiKey'
      type: object
    ApplicationKey:
      properties:
        hash:
          example: 1234512345123459cda4eb9ced49a3d84fd0138c
          maxLength: 40
          minLength: 40
          readOnly: true
          type: string
        name:
          example: example user
          type: string
        owner:
          example: example.com
          readOnly: true
          type: string
      type: object
    ApplicationKeyListResponse:
      example:
        application_keys:
        - hash: 1234512345123459cda4eb9ced49a3d84fd0138c
          name: app_key
          owner: test_user
      properties:
        application_keys:
          items:
            $ref: '#/components/schemas/ApplicationKey'
          type: array
      type: object
    ApplicationKeyResponse:
      example:
        application_key:
          hash: 1234512345123459cda4eb9ced49a3d84fd0138c
          name: app_key
          owner: test_user
      properties:
        application_key:
          $ref: '#/components/schemas/ApplicationKey'
      type: object
    ArithmeticProcessor:
      description: "Use the Arithmetic Processor to add a new attribute (without spaces\
        \ or special characters in the new attribute name) to a log with the result\
        \ of the provided formula. This enables you to remap different time attributes\
        \ with different units into a single attribute, or to compute operations on\
        \ attributes within the same log.\n\nThe formula can use parentheses and the\
        \ basic arithmetic operators: `-`, `+`, `*`, `/`.\n\nBy default, the calculation\
        \ is skipped if an attribute is missing. Select \u201CReplace missing attribute\
        \ by 0\u201D to automatically populate missing attribute values with 0 to\
        \ ensure that the calculation is done. An attribute is missing if it is not\
        \ found in the log attributes, or if it cannot be converted to a number.\n\
        *Notes*:\n- The operator `-` needs to be space split in the formula as it\
        \ can also be contained in attribute names.\n- If the target attribute already\
        \ exists, it is overwritten by the result of the formula.\n- Results are rounded\
        \ up to the 9th decimal. For example, if the result of the formula is `0.1234567891`,\
        \ the actual value stored for the attribute is `0.123456789`.\n- If you need\
        \ to scale a unit of measure, see [Scale Filter](https://docs.datadoghq.com/logs/processing/parsing/?tab=filter#matcher-and-filter)."
      properties:
        expression:
          description: Arithmetic operation between one or more log attributes.
          type: string
        is_replace_missing:
          default: false
          description: 'If `true`, it replaces all missing attributes of expression
            by `0`, `false` skip the operation if an attribute is missing. Default:
            `false`.'
          type: boolean
        target:
          description: Name of the attribute that contains the result of the arithmetic
            operation.
          type: string
        type:
          default: arithmetic-processor
          description: Type of processor
          readOnly: true
          type: string
      required:
      - target
      - expression
      type: object
    AzureAccount:
      properties:
        client_id:
          description: Your Azure web application ID.
          example: testc7f6-1234-5678-9101-3fcbf464test
          type: string
        client_secret:
          description: Your Azure web application secret key.
          example: testingx./Sw*g/Y33t..R1cH+hScMDt
          type: string
        errors:
          example:
          - '*'
          items:
            readOnly: true
            type: string
          type: array
        host_filters:
          description: Limit the Azure instances that are pulled into Datadog by using
            tags. Only hosts that match one of the defined tags are imported into
            Datadog.
          example: key:value,filter:example
          type: string
        new_client_id:
          description: Your New Azure web application ID.
          example: new1c7f6-1234-5678-9101-3fcbf464test
          type: string
        new_tenant_name:
          description: Your New Azure Active Directory ID.
          example: new1c44-1234-5678-9101-cc00736ftest
          type: string
        tenant_name:
          description: Your Azure Active Directory ID.
          example: testc44-1234-5678-9101-cc00736ftest
          type: string
      type: object
    AzureAccountListResponse:
      items:
        $ref: '#/components/schemas/AzureAccount'
      type: array
    CancelDowntimesByScopeRequest:
      properties:
        scope:
          example: host:myserver
          type: string
      required:
      - scope
      type: object
    CanceledDowntimesIds:
      properties:
        cancelled_ids:
          example:
          - 123456789
          - 123456790
          items:
            format: int64
            type: integer
          type: array
      type: object
    CategoryProcessor:
      description: 'Use the Category Processor to add a new attribute (without spaces
        or special characters in the new attribute name) to a log matching a provided
        search query. Use categories to create groups for an analytical view (for
        example, URL groups, machine groups, environments, and response time buckets).

        **Note**:

        - The syntax of the query is the one of Logs Explorer search bar. The query
        can be done on any log attribute or tag, whether it is a facet or not. Wildcards
        can also be used inside your query.

        - Once the log has matched one of the Processor queries, it stops. Make sure
        they are properly ordered in case a log could match several queries.

        - The names of the categories must be unique.

        - Once defined in the Category Processor, you can map categories to log status
        using the Log Status Remapper.'
      properties:
        categories:
          description: Array of filters to match or not a log and their corresponding
            `name` to assign a custom value to the log.
          items:
            properties:
              filter:
                $ref: '#/components/schemas/LogsFilter'
              name:
                description: Value to assign to the target attribute
                type: string
            type: object
          type: array
        target:
          description: Name of the target attribute which value is defined by the
            matching category.
          type: string
        type:
          default: category-processor
          description: Type of processor
          readOnly: true
          type: string
      required:
      - categories
      - target
      type: object
    CheckCanDeleteServiceLevelObjectiveResponse:
      description: A service level objective response containing the requested object.
      properties:
        data:
          description: An array of service level objective objects.
          properties:
            ok:
              description: An array of of SLO IDs that can be safely deleted.
              items:
                type: string
              type: array
          type: object
        errors:
          additionalProperties:
            description: Description of the service level objective reference.
            type: string
          description: A mapping of SLO id to it's current usages.
          type: object
      required:
      - data
      type: object
    Creator:
      description: Creator of the object
      properties:
        email:
          type: string
        handle:
          type: string
        name:
          type: string
      type: object
    DashboardList:
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard list
          format: date-time
          readOnly: true
          type: string
        dashboard_count:
          description: The number of dashboards in the list
          format: int64
          readOnly: true
          type: integer
        id:
          description: The ID of the dashboard list
          format: int64
          readOnly: true
          type: integer
        is_favorite:
          description: Whether or not the list is in the favorites
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard list
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the dashboard list
          type: string
        type:
          description: The type of dashboard list
          example: manual_dashboard_list
          readOnly: true
          type: string
      required:
      - name
      type: object
    DashboardListDeleteResponse:
      properties:
        deleted_dashboard_list_id:
          description: ID of the deleted dashboard list
          format: int64
          type: integer
      type: object
    DashboardListListResponse:
      properties:
        dashboard_lists:
          description: List of all your dashboard lists
          items:
            $ref: '#/components/schemas/DashboardList'
          type: array
      type: object
    DeletedMonitor:
      description: Response from the DeleteMonitor call
      properties:
        deleted_monitor_id:
          description: ID of the deleted monitor
          format: int64
          type: integer
      type: object
    Downtime:
      properties:
        active:
          example: true
          readOnly: true
          type: boolean
        canceled:
          example: 1412799983
          format: int64
          nullable: true
          readOnly: true
          type: integer
        creator_id:
          example: 123456
          format: int32
          maximum: 2147483647
          readOnly: true
          type: integer
        disabled:
          example: false
          type: boolean
        downtime_type:
          example: 2
          format: int32
          maximum: 2147483647
          readOnly: true
          type: integer
        end:
          example: 1412793983
          format: int64
          nullable: true
          type: integer
        id:
          example: 1625
          format: int64
          readOnly: true
          type: integer
        message:
          example: Message on the downtime
          type: string
        monitor_id:
          example: 123456
          format: int64
          nullable: true
          type: integer
        monitor_tags:
          example:
          - '*'
          items:
            type: string
          type: array
        parent_id:
          example: 123
          format: int64
          nullable: true
          type: integer
        recurrence:
          $ref: '#/components/schemas/DowntimeRecurrence'
        scope:
          example:
          - env:staging
          items:
            type: string
          type: array
        start:
          example: 1412792983
          format: int64
          type: integer
        timezone:
          example: America/New_York
          type: string
        updater_id:
          example: 123456
          format: int32
          maximum: 2147483647
          readOnly: true
          type: integer
      type: object
    DowntimeRecurrence:
      nullable: true
      properties:
        period:
          example: 1
          format: int32
          maximum: 2147483647
          type: integer
        type:
          example: weeks
          type: string
        until_date:
          example: 1447786293
          format: int64
          nullable: true
          type: integer
        until_occurrences:
          example: 2
          format: int32
          maximum: 2147483647
          nullable: true
          type: integer
        week_days:
          example:
          - Mon
          - Tue
          items:
            type: string
          type: array
      type: object
    Error400:
      properties:
        errors:
          items:
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    Error401:
      properties:
        errors:
          items:
            example: Unauthorized
            type: string
          type: array
      required:
      - errors
      type: object
    Error403:
      properties:
        errors:
          items:
            example: Forbidden
            type: string
          type: array
      required:
      - errors
      type: object
    Error404:
      properties:
        errors:
          items:
            example: Not Found
            type: string
          type: array
      required:
      - errors
      type: object
    Error408:
      properties:
        errors:
          items:
            example: Request timeout
            type: string
          type: array
      required:
      - errors
      type: object
    Error409:
      properties:
        errors:
          items:
            example: Conflict
            type: string
          type: array
      required:
      - errors
      type: object
    Error413:
      properties:
        errors:
          items:
            example: Payload too large
            type: string
          type: array
      required:
      - errors
      type: object
    Error415:
      properties:
        errors:
          items:
            example: Unsupported Media Type
            type: string
          type: array
      required:
      - errors
      type: object
    Error500:
      properties:
        errors:
          items:
            example: Internal Server Error
            type: string
          type: array
      required:
      - errors
      type: object
    Event:
      properties:
        aggregation_key:
          description: An arbitrary string to use for aggregation. Limited to 100
            characters. If you specify a key, all events using that key are grouped
            together in the Event Stream.
          maxLength: 100
          type: string
        alert_type:
          description: 'If it is an alert event, set its type between: error, warning,
            info, and success.'
          enum:
          - error
          - warning
          - info
          - success
          example: info
          type: string
          x-enum-varnames:
          - ERROR
          - WARNING
          - INFO
          - SUCCESS
        date_happened:
          description: POSIX timestamp of the event. Must be sent as an integer (i.e.
            no quotes). Limited to events no older than 1 year, 24 days (389 days)
          format: int64
          type: integer
        device_name:
          description: A list of device names to post the event with.
          items:
            type: string
          type: array
        host:
          description: Host name to associate with the event. Any tags associated
            with the host are also applied to this event.
          type: string
        id:
          format: int64
          readOnly: true
          type: integer
        payload:
          example: '{}'
          readOnly: true
          type: string
        priority:
          description: 'The priority of the event: normal or low.'
          enum:
          - normal
          - low
          example: normal
          type: string
          x-enum-varnames:
          - NORMAL
          - LOW
        related_event_id:
          description: ID of the parent event. Must be sent as an integer (i.e. no
            quotes).
          format: int64
          type: integer
        source_type_name:
          description: 'The type of event being posted. Options: nagios, hudson, jenkins,
            my_apps, chef, puppet, git, bitbucket, ... [Complete list of source attribute
            values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)'
          type: string
        tags:
          description: A list of tags to apply to the event.
          example:
          - environment:test
          items:
            type: string
          type: array
        text:
          description: The body of the event. Limited to 4000 characters. The text
            supports markdown. Use msg_text with the Datadog Ruby library
          example: Oh boy!
          maxLength: 4000
          type: string
        title:
          description: The event title. Limited to 100 characters. Use msg_title with
            the Datadog Ruby library.
          example: Did you hear the news today?
          maxLength: 100
          type: string
        url:
          readOnly: true
          type: string
      required:
      - title
      - text
      type: object
    EventListResponse:
      properties:
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        status:
          type: string
      type: object
    EventResponse:
      properties:
        event:
          $ref: '#/components/schemas/Event'
        status:
          type: string
      type: object
    GCPAccount:
      properties:
        auth_provider_x509_cert_url:
          description: Should be https://www.googleapis.com/oauth2/v1/certs.
          example: https://www.googleapis.com/oauth2/v1/certs
          type: string
        auth_uri:
          description: Should be https://accounts.google.com/o/oauth2/auth.
          example: https://accounts.google.com/o/oauth2/auth
          type: string
        automute:
          description: Silence monitors for expected GCE instance shutdowns.
          type: boolean
        client_email:
          description: Your email found in your JSON service account key.
          example: api-dev@datadog-sandbox.iam.gserviceaccount.com
          type: string
        client_id:
          description: Your ID found in your JSON service account key.
          example: '123456712345671234567'
          type: string
        client_x509_cert_url:
          description: Should be https://www.googleapis.com/robot/v1/metadata/x509/<CLIENT_EMAIL>
            where <CLIENT_EMAIL> is the email found in your JSON service account key.
          example: https://www.googleapis.com/robot/v1/metadata/x509/<CLIENT_EMAIL>
          type: string
        errors:
          example:
          - '*'
          items:
            readOnly: true
            type: string
          type: array
        host_filters:
          description: Limit the GCE instances that are pulled into Datadog by using
            tags. Only hosts that match one of the defined tags are imported into
            Datadog.
          example: key:value,filter:example
          type: string
        private_key:
          description: Your private key name found in your JSON service account key.
          example: private_key
          type: string
        private_key_id:
          description: Your private key ID found in your JSON service account key.
          example: 123456789abcdefghi123456789abcdefghijklm
          type: string
        project_id:
          description: Your Google Cloud project ID found in your JSON service account
            key.
          example: datadog-apitest
          type: string
        token_uri:
          description: Should be https://accounts.google.com/o/oauth2/token.
          example: https://accounts.google.com/o/oauth2/token
          type: string
        type:
          description: The value for service_account found in your JSON service account
            key.
          example: service_account
          type: string
      type: object
    GCPAccountListResponse:
      items:
        $ref: '#/components/schemas/GCPAccount'
      type: array
    GeoIPParser:
      description: The GeoIP parser takes an IP address attribute and extracts if
        available the Continent, Country, Subdivision, and City information in the
        target attribute path.
      properties:
        sources:
          default:
          - network.client.ip
          description: 'Array of source attributes, default: `network.client.ip`.'
          items:
            type: string
          type: array
        target:
          default: network.client.geoip
          description: 'Name of the parent attribute that contains all the extracted
            details from the `sources`, default: `network.client.geoip`.'
          type: string
        type:
          default: geo-ip-parser
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    GraphSnapshot:
      properties:
        graph_def:
          type: string
        metric_query:
          type: string
        snapshot_url:
          type: string
      type: object
    GrokParser:
      description: Create custom grok rules to parse the full message or [a specific
        attribute of your raw event](https://docs.datadoghq.com/logs/processing/parsing/#advanced-settings).
        For more information, see the [parsing section](https://docs.datadoghq.com/logs/processing/parsing).
      properties:
        grok:
          $ref: '#/components/schemas/GrokParserRules'
        samples:
          description: List of sample logs for this grok parser
          items:
            maxLength: 5000
            type: string
          maxItems: 5
          type: array
        source:
          default: message
          description: 'Name of the log attribute to parse, default: message.'
          type: string
        type:
          default: grok-parser
          description: Type of processor
          readOnly: true
          type: string
      required:
      - source
      - grok
      type: object
    GrokParserRules:
      description: Set of rules for the grok parser
      properties:
        match_rules:
          description: List of match rules for the grok parser, separated by a new
            line
          example: 'rule1 foo

            rule2 bar'
          type: string
        support_rules:
          default: ''
          description: List of support rules for the grok parser, separated by a new
            line
          example: 'rule1 foo

            rule2 bar'
          type: string
      required:
      - match_rules
      type: object
    HistoryServiceLevelObjectiveGroups:
      description: "A `monitor` based SLO history for either `groups` or `monitors`\
        \ depending on the type of `monitor` SLO. Ex. `single-monitor` these represent\
        \ `groups`\n    vs `multi-monitor` which represents individual monitor's overall\
        \ history"
      properties:
        history:
          description: For `monitor` based SLOs, this includes the aggregated history
            uptime time series.
          items:
            description: Represents an array of 2-tuple of (timestamp, value) time
              series data.
            items:
              format: double
              type: number
            maxItems: 2
            minItems: 2
            type: array
          type: array
        name:
          description: For single-monitor `monitor` based SLOs this is the `monitor
            group` name For multi-monitor `monitor` based SLOs this is the `monitor`
            name
          type: string
        precision:
          additionalProperties:
            format: double
            type: number
          description: A mapping of threshold `timeframe` to number of accurate decimals,
            regardless of the from && to timestamp.
          type: object
        preview:
          description: For `monitor` based SLOs when `true` this indicates that a
            replay is in progress to give an accurate uptime calculation.
          type: boolean
        span_precision:
          description: The amount of decimal places the uptime value is accurate to
            for the given from and to timestamp.
          format: double
          type: number
        uptime:
          description: The uptime value of the SLO history window.
          format: double
          type: number
      type: object
    HistoryServiceLevelObjectiveMetrics:
      description: A `metric` based SLO history response.
      properties:
        denominator:
          $ref: '#/components/schemas/HistoryServiceLevelObjectiveMetricsSeries'
        interval:
          description: The aggregated query interval for the series data. It's implicit
            based on the query time window.
          format: int64
          type: integer
        message:
          description: Optional message if there are specific query issues/warnings.
          type: string
        numerator:
          $ref: '#/components/schemas/HistoryServiceLevelObjectiveMetricsSeries'
        query:
          description: The combined numerator && denominator query CSV.
          type: string
        res_type:
          description: The series result type. This mimics `batch_query` response
            type
          type: string
        resp_version:
          description: The series response version type. This mimics `batch_query`
            response type
          format: int64
          type: integer
      type: object
    HistoryServiceLevelObjectiveMetricsSeries:
      description: A representation of `metric` based SLO time series for the provided
        queries. This is the same response type from `batch_query` endpoint.
      properties:
        count:
          description: Count of submitted metrics
          format: int64
          type: integer
        metadata:
          description: Query metadata.
          properties:
            aggr:
              description: Query aggregator function.
              type: string
            expression:
              description: Query expression.
              type: string
            metric:
              description: Query metric used.
              type: string
            query_index:
              description: Query index from original combined query.
              format: int64
              type: integer
            scope:
              description: Query scope.
              type: string
            unit:
              description: Query units (if available).
              type: string
          type: object
        sum:
          description: Total Sum of the query
          format: double
          type: number
        times:
          description: The query timestamps in epoch seconds
          items:
            format: int64
            type: integer
          type: array
        values:
          description: The query values
          items:
            format: double
            type: number
          type: array
      type: object
    HistoryServiceLevelObjectiveOverall:
      properties:
        history:
          description: For `monitor` based SLOs, this includes the aggregated history
            uptime time series.
          items:
            description: Represents an array of 2-tuple of (timestamp, value) time
              series data.
            items:
              format: double
              type: number
            maxItems: 2
            minItems: 2
            type: array
          type: array
        name:
          description: For `monitor` based SLOs this represents the overall group.
          type: string
        precision:
          additionalProperties:
            format: double
            type: number
          description: A mapping of threshold `timeframe` to number of accurate decimals,
            regardless of the from && to timestamp.
          type: object
        preview:
          description: For `monitor` based SLOs when `true` this indicates that a
            replay is in progress to give an accurate uptime calculation.
          type: boolean
        span_precision:
          description: The amount of decimal places the uptime value is accurate to
            for the given from and to timestamp.
          format: double
          type: number
        uptime:
          description: The uptime value of the SLO history window.
          format: double
          type: number
      type: object
    HistoryServiceLevelObjectiveResponse:
      properties:
        data:
          properties:
            from_ts:
              description: the `from` timestamp in epoch seconds
              format: int64
              type: integer
            groups:
              $ref: '#/components/schemas/HistoryServiceLevelObjectiveGroups'
            overall:
              $ref: '#/components/schemas/HistoryServiceLevelObjectiveOverall'
            series:
              $ref: '#/components/schemas/HistoryServiceLevelObjectiveMetrics'
            thresholds:
              additionalProperties:
                $ref: '#/components/schemas/SLOThreshold'
              description: mapping of string timeframe to the SLO threshold.
              type: object
            to_ts:
              description: the `to` timestamp in epoch seconds
              format: int64
              type: integer
          type: object
        errors:
          description: A list of errors while querying the history data for the service
            level obective.
          items:
            $ref: '#/components/schemas/HistoryServiceLevelObjectiveResponseError'
          type: array
      required:
      - data
      type: object
    HistoryServiceLevelObjectiveResponseError:
      description: A service level objective response containing the requested history.
      properties:
        error:
          description: human readable error
          type: string
      type: object
    Host:
      properties:
        aliases:
          items:
            example: mycoolhost-1
            type: string
          type: array
        apps:
          items:
            example: agent
            type: string
          type: array
        aws_name:
          example: mycoolhost-1
          type: string
        host_name:
          example: i-deadbeef
          type: string
        id:
          example: 123456
          format: int64
          type: integer
        is_muted:
          example: false
          type: boolean
        last_reported_time:
          example: 1565000000
          format: int64
          type: integer
        meta:
          properties:
            nixV:
              items:
                example: Ubuntu
                type: string
              type: array
          type: object
        metrics:
          properties:
            cpu:
              example: 99.0
              format: double
              type: number
            iowait:
              example: 3.2
              format: double
              type: number
            load:
              example: 0.5
              format: double
              type: number
          type: object
        mute_timeout:
          format: int64
          type: integer
        name:
          example: i-hostname
          type: string
        sources:
          items:
            example: aws
            type: string
          type: array
        tags_by_source:
          additionalProperties:
            items:
              example: test.example.com.host
              type: string
            type: array
          type: object
        up:
          example: true
          type: boolean
      type: object
    HostListResponse:
      properties:
        host_list:
          items:
            $ref: '#/components/schemas/Host'
          type: array
        total_matching:
          example: 1
          format: int64
          type: integer
        total_returned:
          example: 1
          format: int64
          type: integer
      type: object
    HostMuteResponse:
      properties:
        action:
          example: Muted
          type: string
        end:
          description: POSIX timestamp in seconds when the host is unmuted.
          example: 1579098130
          format: int64
          type: integer
        hostname:
          example: test.host
          type: string
        message:
          example: Muting this host for a test!
          type: string
      type: object
    HostMuteSettings:
      properties:
        end:
          description: POSIX timestamp in seconds when the host is unmuted. If omitted,
            the host remains muted until explicitly unmuted.
          example: 1579098130
          format: int64
          type: integer
        message:
          description: Message to associate with the muting of this host.
          example: Muting this host for a test!
          type: string
        override:
          description: If true and the host is already muted, replaces existing host
            mute settings.
          example: false
          type: boolean
      type: object
    HostTags:
      properties:
        host:
          example: test.host
          type: string
        tags:
          items:
            example: environment:production
            type: string
          type: array
      type: object
    HostTotals:
      properties:
        total_active:
          format: int64
          type: integer
        total_up:
          format: int64
          type: integer
      type: object
    IPPrefixes:
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPRanges:
      properties:
        agents:
          $ref: '#/components/schemas/IPPrefixes'
        api:
          $ref: '#/components/schemas/IPPrefixes'
        apm:
          $ref: '#/components/schemas/IPPrefixes'
        logs:
          $ref: '#/components/schemas/IPPrefixes'
        modified:
          description: Date when last updated, in the form `YYYY-MM-DD-hh-mm-ss`
          example: 2019-10-31-20-00-00
          type: string
        process:
          $ref: '#/components/schemas/IPPrefixes'
        synthetics:
          $ref: '#/components/schemas/IPPrefixes'
        version:
          description: Version of the IP list
          example: 11
          format: int64
          type: integer
        webhooks:
          $ref: '#/components/schemas/IPPrefixes'
      type: object
    IdpFormData:
      properties:
        idp_file:
          description: The path to the XML metadata file you wish to upload.
          format: binary
          type: string
      required:
      - idp_file
      type: object
    IdpResponse:
      properties:
        message:
          example: IdP metadata successfully uploaded for example org
          type: string
      required:
      - message
      type: object
    IntakePayloadAccepted:
      properties:
        status:
          example: ok
          type: string
      type: object
    LogDateRemapper:
      description: "As Datadog receives logs, it timestamps them using the value(s)\
        \ from any of these default attributes:\n\n  - timestamp\n\n  - date\n\n \
        \ - _timestamp\n\n  - Timestamp\n\n  - eventTime\n\n  - published_date\n\n\
        \n  If your logs put their dates in an attribute not in this list, use the\
        \ log date Remapper Processor to define their date attribute as the official\
        \ log timestamp.\n  The recognized date formats are: ISO8601, UNIX (the milliseconds\
        \ EPOCH format), and RFC3164.\n\n  **Note:**\n\n    - If your logs don\u2019\
        t contain any of the default attributes and you haven\u2019t defined your\
        \ own date attribute, Datadog timestamps the logs with the date it received\
        \ them.\n\n    - If multiple log date remapper processors can be applied to\
        \ a given log, only the first one (according to the pipelines order) is taken\
        \ into account."
      properties:
        sources:
          description: Array of source attributes.
          items:
            type: string
          type: array
        type:
          default: date-remapper
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogMessageRemapper:
      description: 'The message is a key attribute in Datadog. It is displayed in
        the message column of the Log Explorer and you can do full string search on
        it. Use this Processor to define one or more attributes as the official log
        message.

        **Note:** If multiple log message remapper processors can be applied to a
        given log, only the first one (according to the pipeline order) is taken into
        account.'
      properties:
        sources:
          default:
          - msg
          description: Array of source attributes.
          items:
            type: string
          type: array
        type:
          default: message-remapper
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogStatusRemapper:
      description: "Use this Processor if you want to assign some attributes as the\
        \ official status.\nEach incoming status value is mapped as follows:\n\n \
        \ - Integers from 0 to 7 map to the Syslog severity standards\n\n  - Strings\
        \ beginning with emerg or f (case-insensitive) map to emerg (0)\n\n  - Strings\
        \ beginning with a (case-insensitive) map to alert (1)\n\n  - Strings beginning\
        \ with c (case-insensitive) map to critical (2)\n\n  - Strings beginning with\
        \ err (case-insensitive) map to error (3)\n\n  - Strings beginning with w\
        \ (case-insensitive) map to warning (4)\n\n  - Strings beginning with n (case-insensitive)\
        \ map to notice (5)\n\n  - Strings beginning with i (case-insensitive) map\
        \ to info (6)\n\n  - Strings beginning with d, trace or verbose (case-insensitive)\
        \ map to debug (7)\n\n  - Strings beginning with o or matching OK or Success\
        \ (case-insensitive) map to OK\n\n  - All others map to info (6)\n\n  **Note:**\
        \ If multiple log status remapper processors can be applied to a given log,\
        \ only the first one (according to the pipelines order) is taken into account."
      properties:
        sources:
          description: Array of source attributes.
          items:
            type: string
          type: array
        type:
          default: status-remapper
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogsAPIError:
      description: Error returned by the Logs API
      properties:
        code:
          description: Code identifying the error
          type: string
        details:
          description: Additional error details
          items:
            $ref: '#/components/schemas/LogsAPIError'
          type: array
        message:
          description: Error message
          type: string
      type: object
    LogsAPIErrorResponse:
      description: Response returned by the Logs API when errors occur
      properties:
        error:
          $ref: '#/components/schemas/LogsAPIError'
      type: object
    LogsFilter:
      description: Filter for logs.
      properties:
        query:
          description: The filter query
          example: source:python
          type: string
      type: object
    LogsPipeline:
      description: Definition of a logs pipeline
      properties:
        filter:
          $ref: '#/components/schemas/LogsFilter'
        id:
          description: ID of the pipeline
          readOnly: true
          type: string
        is_enabled:
          description: Whether or not the pipeline is enabled
          type: boolean
        is_read_only:
          description: Whether or not the pipeline can be edited
          readOnly: true
          type: boolean
        name:
          description: Name of the pipeline
          type: string
        processors:
          description: Ordered list of processors in this pipeline
          items:
            $ref: '#/components/schemas/LogsProcessor'
          type: array
        type:
          description: Type of pipeline
          example: pipeline
          readOnly: true
          type: string
      required:
      - name
      type: object
    LogsPipelineList:
      items:
        $ref: '#/components/schemas/LogsPipeline'
      type: array
    LogsPipelinesOrder:
      description: Object containing the ordered list of pipeline IDs
      properties:
        pipeline_ids:
          description: Ordered Array of <PIPELINE_ID> strings, the order of pipeline
            IDs in the array define the overall Pipelines order for Datadog.
          items:
            type: string
          type: array
      required:
      - pipeline_ids
      type: object
    LogsProcessor:
      description: Definition of a logs processor
      discriminator:
        mapping:
          arithmetic-processor: '#/components/schemas/ArithmeticProcessor'
          attribute-remapper: '#/components/schemas/Remapper'
          category-processor: '#/components/schemas/CategoryProcessor'
          date-remapper: '#/components/schemas/LogDateRemapper'
          geo-ip-parser: '#/components/schemas/GeoIPParser'
          grok-parser: '#/components/schemas/GrokParser'
          lookup-processor: '#/components/schemas/LookupProcessor'
          message-remapper: '#/components/schemas/LogMessageRemapper'
          service-remapper: '#/components/schemas/ServiceRemapper'
          status-remapper: '#/components/schemas/LogStatusRemapper'
          string-builder-processor: '#/components/schemas/StringBuilderProcessor'
          trace-id-remapper: '#/components/schemas/TraceRemapper'
          url-parser: '#/components/schemas/URLParser'
          user-agent-parser: '#/components/schemas/UserAgentParser'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/GrokParser'
      - $ref: '#/components/schemas/LogDateRemapper'
      - $ref: '#/components/schemas/LogStatusRemapper'
      - $ref: '#/components/schemas/ServiceRemapper'
      - $ref: '#/components/schemas/LogMessageRemapper'
      - $ref: '#/components/schemas/Remapper'
      - $ref: '#/components/schemas/URLParser'
      - $ref: '#/components/schemas/UserAgentParser'
      - $ref: '#/components/schemas/CategoryProcessor'
      - $ref: '#/components/schemas/ArithmeticProcessor'
      - $ref: '#/components/schemas/StringBuilderProcessor'
      - $ref: '#/components/schemas/GeoIPParser'
      - $ref: '#/components/schemas/LookupProcessor'
      - $ref: '#/components/schemas/TraceRemapper'
      properties:
        is_enabled:
          default: false
          description: Whether or not the processor is enabled
          type: boolean
        name:
          description: Name of the processor
          type: string
      type: object
    LookupProcessor:
      description: Use the Lookup Processor to define a mapping between a log attribute
        and a human readable value saved in the processors mapping table. For example,
        you can use the Lookup Processor to map an internal service ID into a human
        readable service name. Alternatively, you could also use it to check if the
        MAC address that just attempted to connect to the production environment belongs
        to your list of stolen machines.
      properties:
        default_lookup:
          description: Value to set the target attribute if the source value is not
            found in the list.
          type: string
        lookup_table:
          description: Mapping table of values for the source attribute and their
            associated target attribute values, formatted as `["source_key1,target_value1",
            "source_key2,target_value2"]`
          items:
            type: string
          type: array
        source:
          description: Source attribute used to perform the lookup.
          type: string
        target:
          description: Name of the attribute that contains the corresponding value
            in the mapping list or the `default_lookup` if not found in the mapping
            list.
          type: string
        type:
          default: lookup-processor
          description: Type of processor
          readOnly: true
          type: string
      required:
      - source
      - target
      - lookup_table
      type: object
    MetricMetadata:
      properties:
        description:
          description: Metric description
          type: string
        integration:
          description: Name of the integration that sent the metric if applicable
          readOnly: true
          type: string
        per_unit:
          description: Per unit of the metric such as `second` in `bytes per second`
          type: string
        short_name:
          description: A more human-readable and abbreviated version of the metric
            name
          type: string
        statsd_interval:
          description: Statsd flush interval of the metric in seconds if applicable
          format: int64
          type: integer
        type:
          description: Metric type such as `gauge` or `rate`
          example: count
          type: string
        unit:
          description: Primary unit of the metric such as `byte` or `operation`
          type: string
      required:
      - type
      type: object
    MetricSearchResponse:
      properties:
        results:
          description: Search result
          properties:
            metrics:
              description: List of metrics that match the search query
              items:
                type: string
              type: array
          type: object
      type: object
    MetricsListResponse:
      properties:
        from:
          description: Time when the metrics where active, seconds since the Unix
            epoch.
          type: string
        metrics:
          description: List of metric names
          items:
            type: string
          type: array
      type: object
    MetricsPayload:
      properties:
        series:
          description: A list of time series to submit to Datadog
          items:
            $ref: '#/components/schemas/Series'
          type: array
      type: object
    MetricsQueryResponse:
      properties:
        error:
          description: Message indicating the errors if status is not `ok`
          readOnly: true
          type: string
        from_date:
          description: Start of requested time window, milliseconds since Unix epoch
          format: int64
          readOnly: true
          type: integer
        group_by:
          description: List of tag keys on which to group
          items:
            type: string
          readOnly: true
          type: array
        message:
          description: Message indicating `success` if status is `ok`
          readOnly: true
          type: string
        query:
          description: Query string
          readOnly: true
          type: string
        res_type:
          description: Type of response
          example: time_series
          readOnly: true
          type: string
        series:
          description: List of timeseries queried
          items:
            properties:
              aggr:
                description: Aggregation type
                example: avg
                readOnly: true
                type: string
              display_name:
                description: Display name of the metric
                example: system.cpu.idle
                readOnly: true
                type: string
              end:
                description: End of the time window, milliseconds since Unix epoch
                format: int64
                readOnly: true
                type: integer
              expression:
                description: Metric expression
                example: system.cpu.idle{host:foo,env:test}
                readOnly: true
                type: string
              interval:
                description: Number of seconds between data samples
                format: int64
                readOnly: true
                type: integer
              length:
                description: Number of data samples
                format: int64
                readOnly: true
                type: integer
              metric:
                description: Metric name
                example: system.cpu.idle
                readOnly: true
                type: string
              pointlist:
                description: List of points of the time series
                items:
                  $ref: '#/components/schemas/Point'
                readOnly: true
                type: array
              scope:
                description: Metric scope, comma separated list of tags
                example: host:foo,env:test
                readOnly: true
                type: string
              start:
                description: Start of the time window, milliseconds since Unix epoch
                format: int64
                readOnly: true
                type: integer
              unit:
                description: Detailed information about the metric unit. First element
                  describes the "primary unit" (e.g. `bytes` in `bytes per second`),
                  second describes the "per unit" (e.g. `second` in `bytes per second`)
                items:
                  properties:
                    family:
                      description: Unit family, allows for conversion between units
                        of the same family, for scaling.
                      example: time
                      readOnly: true
                      type: string
                    name:
                      description: Unit name
                      example: minute
                      readOnly: true
                      type: string
                    plural:
                      description: Plural form of the unit name
                      example: minutes
                      readOnly: true
                      type: string
                    scale_factor:
                      description: Factor for scaling between units of the same family.
                      example: 60.0
                      format: double
                      readOnly: true
                      type: number
                    short_name:
                      description: Abbreviation of the unit
                      example: min
                      readOnly: true
                      type: string
                  type: object
                maxItems: 2
                minItems: 2
                readOnly: true
                type: array
            type: object
          readOnly: true
          type: array
        status:
          description: Status of the query
          example: ok
          readOnly: true
          type: string
        to_date:
          description: End of requested time window, milliseconds since Unix epoch
          format: int64
          readOnly: true
          type: integer
      type: object
    Monitor:
      properties:
        created:
          format: date-time
          type: string
        creator:
          $ref: '#/components/schemas/Creator'
        deleted:
          format: date-time
          type: string
        id:
          description: ID of this monitor
          format: int64
          type: integer
        message:
          description: A message to include with notifications for this monitor.
          type: string
        modified:
          format: date-time
          type: string
        multi:
          type: boolean
        name:
          type: string
        options:
          $ref: '#/components/schemas/MonitorOptions'
        overall_state:
          $ref: '#/components/schemas/MonitorOverallStates'
        query:
          type: string
        state:
          $ref: '#/components/schemas/MonitorState'
        tags:
          items:
            type: string
          type: array
        type:
          description: The type of the monitor
          enum:
          - composite
          - event alert
          - log alert
          - metric alert
          - process alert
          - query alert
          - service check
          - synthetics alert
          - trace-analytics alert
          type: string
      type: object
    MonitorOptions:
      properties:
        aggregation:
          properties:
            group_by:
              example: host
              type: string
            metric:
              example: count
              type: string
            type:
              example: count
              type: string
          readOnly: true
          type: object
        device_ids:
          items:
            enum:
            - laptop_large
            - tablet
            - mobile_small
            type: string
          type: array
        enable_logs_sample:
          type: boolean
        escalation_message:
          type: string
        evaluation_delay:
          format: int64
          type: integer
        include_tags:
          type: boolean
        locked:
          type: boolean
        min_failure_duration:
          format: int64
          maximum: 7200
          minimum: 0
          type: integer
        min_location_failed:
          format: int64
          type: integer
        new_host_delay:
          format: int64
          type: integer
        no_data_timeframe:
          format: int64
          type: integer
        notify_audit:
          type: boolean
        notify_no_data:
          type: boolean
        renotify_interval:
          format: int64
          type: integer
        require_full_window:
          type: boolean
        silenced:
          additionalProperties:
            format: int64
            nullable: true
            type: integer
          type: object
        synthetics_check_id:
          format: int64
          type: integer
        threshold_windows:
          $ref: '#/components/schemas/MonitorThresholdWindowOptions'
        thresholds:
          $ref: '#/components/schemas/MonitorThresholds'
        timeout_h:
          format: int64
          type: integer
      type: object
    MonitorOverallStates:
      enum:
      - Alert
      - Ignored
      - No Data
      - OK
      - Skipped
      - Unknown
      - Warn
      type: string
    MonitorState:
      properties:
        groups:
          additionalProperties:
            $ref: '#/components/schemas/MonitorStateGroup'
          type: object
        monitor_id:
          format: int64
          type: integer
        overall_state:
          $ref: '#/components/schemas/MonitorOverallStates'
      type: object
    MonitorStateGroup:
      properties:
        last_data_ts:
          format: int64
          type: integer
        last_nodata_ts:
          format: int64
          type: integer
        last_notified_ts:
          format: int64
          type: integer
        last_resolved_ts:
          format: int64
          type: integer
        last_triggered_ts:
          format: int64
          type: integer
        message:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/MonitorOverallStates'
        triggering_value:
          $ref: '#/components/schemas/MonitorStateGroupValue'
      type: object
    MonitorStateGroupValue:
      properties:
        from_ts:
          format: int64
          type: integer
        left:
          format: double
          type: number
        right:
          format: double
          type: number
        to_ts:
          format: int64
          type: integer
        value:
          format: double
          type: number
      type: object
    MonitorThresholdWindowOptions:
      properties:
        recovery_window:
          type: string
        trigger_window:
          type: string
      type: object
    MonitorThresholds:
      properties:
        critical:
          format: double
          type: number
        critical_recovery:
          format: double
          type: number
        ok:
          format: double
          type: number
        unknown:
          format: double
          type: number
        warning:
          format: double
          type: number
        warning_recovery:
          format: double
          type: number
      type: object
    Org:
      properties:
        billing:
          example:
            type: parent_billing
          properties:
            type:
              type: string
          type: object
        created:
          example: '2019-09-26 17:28:28'
          readOnly: true
          type: string
        description:
          example: some description
          type: string
        name:
          example: New child org
          type: string
        public_id:
          example: abcdef12345
          type: string
        settings:
          properties:
            private_widget_share:
              example: false
              type: boolean
            saml:
              properties:
                enabled:
                  example: false
                  type: boolean
              type: object
            saml_autocreate_access_role:
              enum:
              - st
              - adm
              - ro
              example: st
              type: string
            saml_autocreate_users_domains:
              properties:
                domains:
                  items:
                    example: example.com
                    type: string
                  type: array
                enabled:
                  example: false
                  type: boolean
              type: object
            saml_can_be_enabled:
              example: false
              type: boolean
            saml_idp_endpoint:
              example: https://my.saml.endpoint
              type: string
            saml_idp_initiated_login:
              properties:
                enabled:
                  example: false
                  type: boolean
              type: object
            saml_idp_metadata_uploaded:
              example: false
              type: boolean
            saml_login_url:
              example: https://my.saml.login.url
              type: string
            saml_strict_mode:
              properties:
                enabled:
                  example: false
                  type: boolean
              type: object
          type: object
        subscription:
          example:
            type: pro
          properties:
            type:
              type: string
          type: object
      type: object
    OrgCreateBody:
      properties:
        billing:
          example:
            type: parent_billing
          properties:
            type:
              type: string
          type: object
        name:
          example: New child org
          type: string
        subscription:
          example:
            type: pro
          properties:
            type:
              type: string
          type: object
      required:
      - name
      - subscription
      - billing
      type: object
    OrgCreateResponse:
      properties:
        api_key:
          $ref: '#/components/schemas/ApiKey'
        application_key:
          $ref: '#/components/schemas/ApplicationKey'
        org:
          $ref: '#/components/schemas/Org'
        user:
          $ref: '#/components/schemas/User'
      type: object
    OrgListResponse:
      properties:
        orgs:
          items:
            $ref: '#/components/schemas/Org'
          type: array
      type: object
    OrgResponse:
      properties:
        org:
          $ref: '#/components/schemas/Org'
      type: object
    Point:
      description: 'Each point is of the form: [POSIX_timestamp, numeric_value] The
        timestamp should be in seconds and current. The numeric value format should
        be a 32bit float gauge-type value. Current is defined as not more than 10
        minutes in the future or more than 1 hour in the past.'
      example:
      - 1575317847
      - 0.5
      items:
        format: double
        type: number
      maxItems: 2
      minItems: 2
      type: array
    Remapper:
      description: The remapper processor remaps any source attribute(s) or tag to
        another target attribute or tag. Constraints on the tag/attribute name are
        explained in the [Tag Best Practice documentation](https://docs.datadoghq.com/logs/guide/log-parsing-best-practice).
        Some additional constraints are applied as `:` or `,` are not allowed in the
        target tag/attribute name.
      properties:
        override_on_conflict:
          default: false
          description: 'Override or not the target element if already set, default:
            `false`'
          type: boolean
        preserve_source:
          default: false
          description: 'Remove or preserve the remapped source element, default: `false`'
          type: boolean
        source_type:
          default: attribute
          description: 'Defines if the sources are from log `attribute` or `tag`,
            default: `attribute`'
          type: string
        sources:
          description: Array of source attributes.
          items:
            type: string
          type: array
        target:
          description: Final attribute or tag name to remap the sources to.
          type: string
        target_type:
          default: attribute
          description: 'Defines if the sources are from log `attribute` or `tag`,
            default: `attribute`'
          type: string
        type:
          default: attribute-remapper
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    SLOThreshold:
      properties:
        target:
          description: The target value for the service level indicator within the
            corresponding timeframe.
          format: double
          type: number
        target_display:
          description: 'A string representation of the target that indicates its precision
            (e.g. "99.9"). It uses trailing zeros to show significant decimal places
            (e.g. "98.00").

            Always included in service level objective responses. Ignored in create/update
            requests.'
          type: string
        timeframe:
          $ref: '#/components/schemas/SLOTimeframe'
        warning:
          format: double
          type: number
        warning_display:
          description: 'A string representation of the warning target (see the description
            of the "target_display" field for details).

            Included in service level objective responses if a warning target exists.
            Ignored in create/update requests.'
          type: string
      required:
      - timeframe
      - target
      type: object
    SLOTimeframe:
      enum:
      - 7d
      - 30d
      - 90d
      type: string
    Series:
      properties:
        host:
          description: The name of the host that produced the metric.
          type: string
        interval:
          default: null
          description: If the type of the metric is rate or count, define the corresponding
            interval.
          format: int64
          nullable: true
          type: integer
        metric:
          description: The name of the timeseries
          example: system.load.1
          type: string
        points:
          items:
            $ref: '#/components/schemas/Point'
          type: array
        tags:
          description: A list of tags associated with the metric.
          items:
            type: string
          type: array
        type:
          default: gauge
          type: string
      required:
      - metric
      - points
      type: object
    ServiceCheck:
      properties:
        check:
          example: app.ok
          type: string
        host_name:
          example: app.host1
          type: string
        message:
          example: app is running
          type: string
        status:
          $ref: '#/components/schemas/ServiceCheckStatus'
        tags:
          items:
            type: string
          type: array
        timestamp:
          format: int64
          type: integer
      required:
      - check
      - status
      type: object
    ServiceCheckStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      example: 0
      type: integer
      x-enum-varnames:
      - OK
      - WARNING
      - CRITICAL
      - UNKNOWN
    ServiceChecks:
      items:
        $ref: '#/components/schemas/ServiceCheck'
      type: array
    ServiceLevelObjective:
      description: A service level objective object includes a service level indicator,
        thresholds for one or more timeframes, and metadata (name, description, tags,
        etc.).
      properties:
        created_at:
          description: 'Creation timestamp (unix time in seconds)

            Always included in service level objective responses.'
          format: int64
          type: integer
        creator:
          $ref: '#/components/schemas/Creator'
        description:
          description: 'A user-defined description of the service level objective.

            Always included in service level objective responses (but may be null).
            Optional in create/update requests.'
          nullable: true
          type: string
        groups:
          description: 'A list of (up to 20) monitor groups (e.g. ["env:prod,role:mysql"])
            that narrows the scope of a monitor service level objective.

            Included in service level objective responses if it is nonempty. Optional
            in create/update requests for monitor service level objectives, but may
            only be used when then length of the "monitor_ids" field is one.'
          items:
            type: string
          type: array
        id:
          description: 'A unique identifier for the service level objective object.

            Always included in service level objective responses. Required for update
            requests.'
          type: string
        modified_at:
          description: 'Modification timestamp (unix time in seconds)

            Always included in service level objective responses.'
          format: int64
          type: integer
        monitor_ids:
          description: 'A list of monitor ids that defines the scope of a monitor
            service level objective.

            Required if type is "monitor".'
          items:
            format: int64
            type: integer
          type: array
        monitor_tags:
          description: 'The union of monitor tags for all monitors referenced by the
            "monitor_ids" field.

            Always included in service level objective responses for monitor service
            level objectives (but may be empty). Ignored in create/update requests.
            Does not affect which monitors are included in the service level objective
            (that is determined entirely by the monitor_ids field).'
          items:
            type: string
          type: array
        name:
          description: The name of the service level objective object.
          type: string
        query:
          description: 'A metric SLI query.

            Required if type is "metric".'
          properties:
            denominator:
              description: A Datadog metric query for total (valid) events.
              type: string
            numerator:
              description: A Datadog metric query for good events.
              type: string
          required:
          - numerator
          - denominator
          type: object
        tags:
          description: 'A list of tags (e.g. "env:prod") associated with this service
            level objective.

            Always included in service level objective responses (but may be empty).
            Optional in create/update requests.'
          items:
            type: string
          type: array
        thresholds:
          description: The thresholds (timeframes and associated targets) for this
            service level objective object.
          items:
            $ref: '#/components/schemas/SLOThreshold'
          type: array
        type:
          description: The type of the service level objective.
          enum:
          - metric
          - monitor
          type: string
        type_id:
          description: 'A numeric representation of the type of the service level
            objective (0 for monitor, 1 for metric).

            Always included in service level objective responses. Ignored in create/update
            requests.'
          enum:
          - 0
          - 1
          format: int32
          type: integer
      required:
      - name
      - thresholds
      - type
    ServiceLevelObjectiveDeleted:
      properties:
        data:
          description: An array containing the ID of the deleted service level objective
            object.
          items:
            type: string
          type: array
      required:
      - data
      type: object
    ServiceLevelObjectiveListResponse:
      properties:
        data:
          description: An array of service level objective objects.
          items:
            $ref: '#/components/schemas/ServiceLevelObjective'
          type: array
        errors:
          description: An array of error messages. Each endpoint documents how/whether
            this field is used.
          items:
            type: string
          type: array
      required:
      - data
      type: object
    ServiceLevelObjectiveResponse:
      properties:
        data:
          $ref: '#/components/schemas/ServiceLevelObjective'
        errors:
          description: An array of error messages. Each endpoint documents how/whether
            this field is used.
          items:
            type: string
          type: array
      required:
      - data
      type: object
    ServiceLevelObjectivesBulkDelete:
      additionalProperties:
        items:
          $ref: '#/components/schemas/SLOTimeframe'
        type: array
      description: A map of service level objective object IDs to arrays of timeframes,
        which indicate the thresholds to delete for each ID.
      example:
        id1:
        - 7d
        - 30d
        id2:
        - 7d
        - 30d
      type: object
    ServiceLevelObjectivesBulkDeleted:
      description: 'The bulk partial delete service level objective object endpoint
        response.

        This endpoint operates on multiple service level objective objects, so it
        may be partially successful. In such cases, the "data" and "error" fields
        in this response indicate which deletions succeeded and failed.'
      properties:
        data:
          properties:
            deleted:
              description: An array of service level objective object IDs that indicates
                which objects that were completely deleted.
              items:
                type: string
              type: array
            updated:
              description: An array of service level objective object IDs that indicates
                which objects that were modified (objects for which at least one threshold
                was deleted, but that were not completely deleted).
              items:
                type: string
              type: array
          type: object
        errors:
          items:
            properties:
              id:
                description: The ID of the service level objective object associated
                  with this error.
                type: string
              message:
                description: The error message
                type: string
              timeframe:
                description: The timeframe of the threshold associated with this error
                  or "all" if all thresholds are affected.
                enum:
                - 7d
                - 30d
                - 90d
                - all
                type: string
            required:
            - id
            - timeframe
            - message
            type: object
          type: array
      required:
      - data
      - errors
      type: object
    ServiceRemapper:
      description: 'Use this processor if you want to assign one or more attributes
        as the official service.

        **Note:** If multiple service remapper processors can be applied to a given
        log, only the first one (according to the pipeline order) is taken into account.'
      properties:
        sources:
          description: Array of source attributes.
          items:
            type: string
          type: array
        type:
          default: service-remapper
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      type: object
    StringBuilderProcessor:
      description: 'Use the string builder processor to add a new attribute (without
        spaces or special characters) to a log with the result of the provided template.
        This enables aggregation of different attributes or raw strings into a single
        attribute.

        The template is defined by both raw text and blocks with the syntax: `%{attribute_path}`.

        **Notes**:

        - The processor only accepts attributes with values or an array of values
        in the blocks.

        - If an attribute cannot be used (object or array of object), it is replaced
        by an empty string or the entire operation is skipped depending on your selection.

        - If the target attribute already exists, it is overwritten by the result
        of the template.

        - Results of the template cannot exceed 256 characters.'
      properties:
        is_replace_missing:
          default: false
          description: If true, it replaces all missing attributes of `template` by
            an empty string. If `false` (default), skips the operation for missing
            attributes.
          type: boolean
        target:
          description: The name of the attribute that contains the result of the template.
          type: string
        template:
          description: A formula with one or more attributes and raw text.
          type: string
        type:
          default: string-builder-processor
          description: Type of processor
          readOnly: true
          type: string
      required:
      - target
      - template
      type: object
    TagToHosts:
      description: In this object, the key is the tag, the value is a list of host
        names that are reporting that tag
      properties:
        tags:
          additionalProperties:
            items:
              example: test.metric.host
              type: string
            type: array
          type: object
      type: object
    TraceRemapper:
      description: "There are two ways to improve correlation between application\
        \ traces and logs:\n\n  1. Follow the documentation on [how to inject a trace\
        \ ID in the application logs](https://docs.datadoghq.com/tracing/connect_logs_and_traces)\
        \ and by default log integrations take care of all the rest of the setup.\n\
        \n  1. Use the Trace remapper processor to define a log attribute as its associated\
        \ trace ID."
      properties:
        sources:
          default:
          - dd.trace_id
          description: 'Array of source attributes, default: `dd.trace_id`.'
          items:
            type: string
          type: array
        type:
          default: trace-id-remapper
          description: Type of processor
          readOnly: true
          type: string
      type: object
    URLParser:
      description: This processor extracts query parameters and other important parameters
        from a URL.
      properties:
        sources:
          default:
          - http.url
          description: 'Array of source attributes, default: `http.url`.'
          items:
            type: string
          type: array
        target:
          default: http.url_details
          description: 'Name of the parent attribute that contains all the extracted
            details from the `sources`, default: `http.url_details`'
          type: string
        type:
          default: url-parser
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    UsageFargateHour:
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        tasks_count:
          description: Contains the number of Fargate tasks run.
          format: int64
          type: integer
      type: object
    UsageFargateResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageFargateHour'
          type: array
      type: object
    UsageHostHour:
      properties:
        agent_host_count:
          description: Contains the total number of infrastructure hosts reporting
            during a given hour that were running the Datadog Agent.
          format: int64
          type: integer
        apm_host_count:
          description: Shows the total number of hosts using APM during the hour,
            these are counted as billable (except during trial periods).
          format: int64
          type: integer
        aws_host_count:
          description: Contains the total number of hosts that reported via the AWS
            integration (and were NOT running the Datadog Agent). When AWS or GCP
            hosts are also running the Datadog Agent, they are counted as Agent hosts,
            NOT as AWS or GCP.
          format: int64
          type: integer
        container_count:
          description: Contains the total number of billable infrastructure hosts
            reporting during a given hour. This is the sum of `agent_host_count`,
            `aws_host_count`, and `gcp_host_count`.
          format: int64
          type: integer
        gcp_host_count:
          description: Contains the total number of hosts that reported via the Google
            Cloud integration (and were NOT running the Datadog Agent).
          format: int64
          type: integer
        host_count:
          description: Shows the total number of containers reporting via the Docker
            integration during the hour.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageHostsResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageHostHour'
          type: array
      type: object
    UsageLogsHour:
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        indexed_events_count:
          description: Contains the number of log events indexed.
          format: int64
          type: integer
        ingested_events_bytes:
          description: Contains the number of log bytes ingested.
          format: int64
          type: integer
      type: object
    UsageLogsResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageLogsHour'
          type: array
      type: object
    UsageSummaryDate:
      properties:
        agent_host_top99p:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current date for all orgs.
          format: int64
          type: integer
        apm_host_top99p:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current date for all orgs.
          format: int64
          type: integer
        aws_host_top99p:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current date for all orgs.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the average of the number of functions that executed
            1 or more times each hour in the current date for all orgs.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Labmda invocations over all hours
            in the current date for all orgs.
          format: int64
          type: integer
        billable_ingested_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for all orgs.
          format: int64
          type: integer
        container_avg:
          description: Shows the average of all distinct containers over all hours
            in the current date for all orgs.
          format: int64
          type: integer
        container_hwm:
          description: Shows the high watermark of all distinct containers over all
            hours in the current date for all orgs.
          format: int64
          type: integer
        custom_ts_avg:
          description: Shows the average number of distinct custom metrics over all
            hours in the current date for all orgs.
          format: int64
          type: integer
        date:
          description: The date for the usage.
          format: date
          type: string
        fargate_tasks_count_avg:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current date for all orgs.
          format: int64
          type: integer
        fargate_tasks_count_hwm:
          description: Shows the average of all Fargate tasks over all hours in the
            current date for all orgs.
          format: int64
          type: integer
        gcp_host_top99p:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current date for all orgs.
          format: int64
          type: integer
        indexed_events_count_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current date for all orgs.
          format: int64
          type: integer
        infra_host_top99p:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current date for all orgs.
          format: int64
          type: integer
        ingested_events_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for all orgs.
          format: int64
          type: integer
        netflow_indexed_events_count_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current date for all orgs.
          format: int64
          type: integer
        npm_host_top99p:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current date for all orgs.
          format: int64
          type: integer
        orgs:
          items:
            $ref: '#/components/schemas/UsageSummaryDateOrg'
          type: array
        synthetics_browser_check_calls_count_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current date for all orgs.
          format: int64
          type: integer
        synthetics_check_calls_count_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current date for all orgs.
          format: int64
          type: integer
        trace_search_indexed_events_count_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current date for all orgs.
          format: int64
          type: integer
      type: object
    UsageSummaryDateOrg:
      properties:
        agent_host_top99p:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current date for the given org.
          format: int64
          type: integer
        apm_host_top99p:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current date for the given org.
          format: int64
          type: integer
        aws_host_top99p:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current date for the given org.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the sum of all AWS Labmda invocations over all hours
            in the current date for the given org.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Labmda invocations over all hours
            in the current date for the given org.
          format: int64
          type: integer
        billable_ingested_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for the given org.
          format: int64
          type: integer
        container_avg:
          description: Shows the average of all distinct containers over all hours
            in the current date for the given org.
          format: int64
          type: integer
        container_hwm:
          description: Shows the high watermark of all distinct containers over all
            hours in the current date for the given org.
          format: int64
          type: integer
        custom_ts_avg:
          description: Shows the average number of distinct custom metrics over all
            hours in the current date for the given org.
          format: int64
          type: integer
        fargate_tasks_count_avg:
          format: int64
          type: integer
        fargate_tasks_count_hwm:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current date for the given org.
          format: int64
          type: integer
        gcp_host_top99p:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current date for the given org.
          format: int64
          type: integer
        id:
          description: The organization id.
          type: string
        indexed_events_count_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current date for the given org.
          format: int64
          type: integer
        infra_host_top99p:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current date for the given org.
          format: int64
          type: integer
        ingested_events_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for the given org.
          format: int64
          type: integer
        name:
          description: The organization name.
          type: string
        netflow_indexed_events_count_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current date for the given org.
          format: int64
          type: integer
        npm_host_top99p:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current date for the given org.
          format: int64
          type: integer
        public_id:
          description: The organization public id.
          type: string
        synthetics_browser_check_calls_count_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current date for the given org.
          format: int64
          type: integer
        synthetics_check_calls_count_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current date for the given org.
          format: int64
          type: integer
        trace_search_indexed_events_count_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current date for the given org.
          format: int64
          type: integer
      type: object
    UsageSummaryResponse:
      properties:
        agent_host_top99p_sum:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        apm_host_top99p_sum:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current month(s) for all orgs.
          format: int64
          type: integer
        aws_host_top99p_sum:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current month(s) for all orgs.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the average of the number of functions that executed
            1 or more times each hour in the current month(s) for all orgs.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Labmda invocations over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        azure_host_top99p_sum:
          description: Shows the 99th percentile of all Azure hosts over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        billable_ingested_bytes_agg_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current month(s) for all orgs.
          format: int64
          type: integer
        container_avg_sum:
          description: Shows the average of all distinct containers over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        container_hwm_sum:
          description: Shows the high watermark of all distinct containers over all
            hours in the current month(s) for all orgs.
          format: int64
          type: integer
        custom_ts_sum:
          description: Shows the average number of distinct custom metrics over all
            hours in the current month(s) for all orgs.
          format: int64
          type: integer
        end_date:
          description: Shows the last date of usage in the current month(s) for all
            orgs.
          format: date
          type: string
        fargate_tasks_count_avg_sum:
          description: Shows the average of all Fargate tasks over all hours in the
            current month(s) for all orgs.
          format: int64
          type: integer
        fargate_tasks_count_hwm_sum:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        gcp_host_top99p_sum:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current month(s) for all orgs.
          format: int64
          type: integer
        indexed_events_count_agg_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current month(s) for all orgs.
          format: int64
          type: integer
        infra_host_top99p_sum:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current month(s) for all orgs.
          format: int64
          type: integer
        ingested_events_bytes_agg_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current month(s) for all orgs.
          format: int64
          type: integer
        last_updated:
          description: Shows the the most recent hour in the current month(s) for
            all orgs for which all usages were calculated.
          format: date-time
          type: string
        netflow_indexed_events_count_agg_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current month(s) for all orgs.
          format: int64
          type: integer
        npm_host_top99p_sum:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current month(s) for all orgs.
          format: int64
          type: integer
        start_date:
          description: Shows the first date of usage in the current month(s) for all
            orgs.
          format: date
          type: string
        synthetics_browser_check_calls_count_agg_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        synthetics_check_calls_count_agg_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current month(s) for all orgs.
          format: int64
          type: integer
        trace_search_indexed_events_count_agg_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current month(s) for all orgs.
          format: int64
          type: integer
        usage:
          items:
            $ref: '#/components/schemas/UsageSummaryDate'
          type: array
      type: object
    UsageSyntheticsHour:
      properties:
        check_calls_count:
          description: Contains the number of Synthetics API tests run.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageSyntheticsResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageSyntheticsHour'
          type: array
      type: object
    UsageTimeseriesHour:
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        num_custom_timeseries:
          description: Contains the number of distinct custom metrics.
          format: int64
          type: integer
      type: object
    UsageTimeseriesResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageTimeseriesHour'
          type: array
      type: object
    UsageTopAvgMetricsHour:
      properties:
        avg_metric_hour:
          description: Average number of timeseries per hour in which the metric occurs.
          format: int64
          type: integer
        max_metric_hour:
          description: Maximum number of timeseries per hour in which the metric occurs.
          format: int64
          type: integer
        metric_category:
          description: Contains the metric category.
          enum:
          - standard
          - custom
          type: string
        metric_name:
          description: Contains the custom metric name.
          type: string
      type: object
    UsageTopAvgMetricsResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageTopAvgMetricsHour'
          type: array
      type: object
    UsageTraceHour:
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        indexed_events_count:
          description: Contains the number of Analyzed Spans indexed.
          format: int64
          type: integer
      type: object
    UsageTraceResponse:
      properties:
        usage:
          items:
            $ref: '#/components/schemas/UsageTraceHour'
          type: array
      type: object
    User:
      properties:
        access_role:
          enum:
          - st
          - adm
          - ro
          type: string
        disabled:
          example: false
          type: boolean
        email:
          example: test@datadoghq.com
          format: email
          type: string
        handle:
          example: test@datadoghq.com
          format: email
          type: string
        icon:
          example: /path/to/matching/gravatar/icon
          readOnly: true
          type: string
        name:
          example: test user
          type: string
        verified:
          example: true
          readOnly: true
          type: boolean
      type: object
    UserAgentParser:
      description: The User-Agent parser takes a User-Agent attribute and extracts
        the OS, browser, device, and other user data. It recognizes major bots like
        the Google Bot, Yahoo Slurp, and Bing.
      properties:
        is_encoded:
          description: 'Define if the source attribute is url encoded or not, default:
            `false`.'
          type: boolean
        sources:
          default:
          - http.useragent
          description: 'Array of source attributes, default: `http.useragent`.'
          items:
            type: string
          type: array
        target:
          default: http.useragent_details
          description: 'Name of the parent attribute that contains all the extracted
            details from the `sources`, default: `http.useragent_details`.'
          type: string
        type:
          default: user-agent-parser
          description: Type of processor
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    UserDisableResponse:
      properties:
        message:
          type: string
      type: object
    UserListResponse:
      properties:
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserResponse:
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
  securitySchemes:
    apiKeyAuth:
      description: API Key
      in: query
      name: api_key
      type: apiKey
    apiKeyAuthHeader:
      description: API Key
      in: header
      name: DD-API-KEY
      type: apiKey
      x-lookup: apiKeyAuth
    appKeyAuth:
      description: APP Key
      in: query
      name: application_key
      type: apiKey
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API Collection
  version: '1.0'
openapi: 3.0.0
paths:
  /:
    get:
      description: Get information about Datadog IP ranges
      operationId: GetIPRanges
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPRanges'
          description: List of IP ranges
      security: []
      servers:
      - url: https://{subdomain}.{site}
        variables:
          site:
            default: datadoghq.com
            description: The regional site for our customers.
            enum:
            - datadoghq.com
            - datadoghq.eu
          subdomain:
            default: ip-ranges
            description: The subdomain where the API is deployed.
      - url: '{protocol}://{name}'
        variables:
          name:
            default: ip-ranges.datadoghq.com
            description: Full site DNS name.
          protocol:
            default: https
            description: The protocol for accessing the API.
      tags:
      - IPRanges
  /api/v1/api_key:
    get:
      description: '## Overview

        Get all API keys available for your account.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: GetAllAPIKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get all API keys available for your account.
      tags:
      - Keys
    post:
      description: '## Overview

        Creates an API key

        ### ARGUMENTS

        * **`name`** [*required*]: Name of your API key.'
      operationId: CreateAPIKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
          description: Conflict
      summary: Create an API key with a given name.
      tags:
      - Keys
      x-codegen-request-body-name: body
  /api/v1/api_key/{key}:
    delete:
      description: '## Overview

        Delete a given API key.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: DeleteAPIKey
      parameters:
      - description: The specific API key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Delete a given API key.
      tags:
      - Keys
    get:
      description: '## Overview

        Get a given API key.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: GetAPIKey
      parameters:
      - description: The specific API key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Get a given API key.
      tags:
      - Keys
    put:
      description: '## Overview

        Edit an API key name.

        ### ARGUMENTS

        * **`name`** [*required*]: Name of your API key.'
      operationId: EditAPIKey
      parameters:
      - description: The specific API key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Edit an API key name.
      tags:
      - Keys
      x-codegen-request-body-name: body
  /api/v1/application_key:
    get:
      description: '## Overview

        Get all application keys available for your account.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: GetAllApplicationKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get all application keys available for your account.
      tags:
      - Keys
    post:
      description: '## Overview

        Create an application key with a given name.

        ### ARGUMENTS

        * **`name`** [*required*]: Name of your application key.'
      operationId: CreateApplicationKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409'
          description: Conflict
      summary: Create an application key with a given name.
      tags:
      - Keys
      x-codegen-request-body-name: body
  /api/v1/application_key/{key}:
    delete:
      description: '## Overview

        Delete a given application key.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: DeleteApplicationKey
      parameters:
      - description: The specific APP key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Delete a given application key.
      tags:
      - Keys
    get:
      description: '## Overview

        Get a given application key.

        ### ARGUMENTS

        This endpoint takes no JSON arguments.'
      operationId: GetApplicationKey
      parameters:
      - description: The specific APP key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Get a given application key.
      tags:
      - Keys
    put:
      description: '## Overview

        Edit an application key name.

        ### ARGUMENTS

        * **`name`** [*required*]: Name of your application key.'
      operationId: EditApplicationKey
      parameters:
      - description: The specific APP key you are working with
        in: path
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationKey'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Edit an application key name.
      tags:
      - Keys
      x-codegen-request-body-name: body
  /api/v1/check_run:
    post:
      description: '### Overview

        Submit a list of Service Checks.

        **Note**: valid API key is required.'
      operationId: SubmitServiceCheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceChecks'
        description: Service Check body
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error408'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error413'
          description: Payload too large
      summary: Submit a Service Check
      tags:
      - ServiceChecks
      x-codegen-request-body-name: body
  /api/v1/dashboard/lists/manual:
    get:
      description: '### Overview

        Fetch all of your existing dashboard list definitions.

        ### Arguments

        This endpoint takes no JSON arguments.'
      operationId: GetAllDashboardLists
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Get all dashboard lists
      tags:
      - DashboardLists
    post:
      description: '### Overview

        Create an empty dashboard list.

        ### Arguments

        * **name** [*required*]: The name of the dashboard list.'
      operationId: CreateDashboardList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardList'
        description: DashboardList request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Create a dashboard list
      tags:
      - DashboardLists
      x-codegen-request-body-name: body
  /api/v1/dashboard/lists/manual/{list_id}:
    delete:
      description: '### Overview

        Delete a dashboard list.

        ### Arguments

        This endpoint takes no JSON arguments.'
      operationId: DeleteDashboardList
      parameters:
      - description: ID of the dashboard list to delete
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Delete a dashboard list
      tags:
      - DashboardLists
    get:
      description: '### Overview

        Fetch an existing dashboard list''s definition.

        ### Arguments

        This endpoint takes no JSON arguments.'
      operationId: GetDashboardList
      parameters:
      - description: ID of the dashboard list to fetch
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Get a dashboard list
      tags:
      - DashboardLists
    put:
      description: '### Overview

        Update the name of a dashboard list.

        ### Arguments

        * **name** [*required*]: The name of the dashboard list.'
      operationId: UpdateDashboardList
      parameters:
      - description: ID of the dashboard list to update
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardList'
        description: DashboardList request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Update a dashboard list
      tags:
      - DashboardLists
      x-codegen-request-body-name: body
  /api/v1/downtime:
    get:
      description: '### Overview

        Get All Scheduled Downtimes

        ### Arguments

        * **`current_only`** [*optional*, *default* = **False**]: Only return downtimes
        that are active when the request is made.'
      operationId: GetAllDowntimes
      parameters:
      - description: Only return downtimes that are active when the request is made.
        in: query
        name: current_only
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Downtime'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Get all downtimes
      tags:
      - Downtimes
    post:
      description: "* **`scope`** [*required*]: The scope(s) to which the downtime\
        \ applies, e.g. `host:app2`.\n  Provide multiple scopes as a comma-separated\
        \ list, e.g. `env:dev,env:prod`. The\n  resulting downtime applies to sources\
        \ that matches ALL provided scopes (i.e.\n  `env:dev` **AND** `env:prod`),\
        \ NOT any of them.\n\n* **`monitor_tags`** [*optional*, *default*=**no monitor\
        \ tag filter**]: A comma-separated\n  list of monitor tags, i.e. tags that\
        \ are applied directly to monitors, *not* tags\n  that are used in monitor\
        \ queries (which are filtered by the `scope` parameter), to\n  which the downtime\
        \ applies. The resulting downtime applies to monitors that match\n  ALL provided\
        \ monitor tags (i.e. `service:postgres` **AND** `team:frontend`), NOT any\
        \ of them.\n\n* **`monitor_id`** [*optional*, *default*=**None**]: A single\
        \ monitor to which the downtime\n  applies. If not provided, the downtime\
        \ applies to all monitors.\n\n* **`start`** [*optional*, *default*=**None**]:\
        \ POSIX timestamp to start the downtime.\n  If not provided, the downtime\
        \ starts the moment it is created.\n\n* **`end`** [*optional*, *default*=**None**]:\
        \ POSIX timestamp to end the downtime.\n  If not provided, the downtime is\
        \ in effect indefinitely (i.e. until you cancel it).\n\n* **`message`** [*optional*,\
        \ *default*=**None**]: A message to include with notifications\n  for this\
        \ downtime. Email notifications can be sent to specific users by using\n \
        \  the same '@username' notation as events\n\n* **`timezone`** [*optional*,\
        \ *default* = **UTC**]: The timezone for the downtime.\n* **`recurrence`**\
        \ [*optional*, *default*=**None**]: An object defining the recurrence of the\n\
        \  downtime with a variety of parameters:\n\n  * **`type`** the type of recurrence.\
        \ Choose from: `days`, `weeks`, `months`, `years`.\n\n  * **`period`** how\
        \ often to repeat as an integer. For example to repeat every 3 days,\n   \
        \ select a type of `days` and a period of `3`.\n\n  * **`week_days`** (optional)\
        \ a list of week days to repeat on. Choose from: `Mon`,\n    `Tue`, `Wed`,\
        \ `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`.\n\
        \    **First letter must be capitalized.**\n  * **`until_occurrences`** (optional)\
        \ how many times the downtime is rescheduled.\n    **`until_occurrences` and\
        \ `until_date`** are mutually exclusive\n\n  * **`until_date`** (optional)\
        \ the date at which the recurrence should end\n    as a POSIX timestmap. **`until_occurrences`\
        \ and `until_date`** are mutually exclusive"
      operationId: CreateDowntime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime'
        description: Downtime request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Schedule a downtime
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/downtime/cancel/by_scope:
    post:
      description: "### Overview\nDELETE all Downtimes that match the scope of X\n\
        ### Arguments\n* **`scope`** [*required*]: Cancel all downtimes with the given\
        \ scope(s),\n  e.g.: `env:prod`, `role:db,role:db-slave`"
      operationId: CancelDowntimesByScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelDowntimesByScopeRequest'
        description: Scope to cancel downtimes for
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanceledDowntimesIds'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: No downtimes found error
      summary: Cancel downtimes by scope
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/downtime/{downtime_id}:
    delete:
      description: Cancel a Downtime
      operationId: CancelDowntime
      parameters:
      - description: ID of the downtime to cancel
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
      responses:
        '204':
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Downtime not found error
      summary: Cancel a downtime
      tags:
      - Downtimes
    get:
      description: '### Overview

        Get Downtime Detail by downtime_id

        ### Arguments

        This endpoint takes no JSON arguments."'
      operationId: GetDowntime
      parameters:
      - description: ID of the downtime to fetch
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Downtime not found error
      summary: Get a downtime
      tags:
      - Downtimes
    put:
      description: "### Overview\nUpdate a single Downtime by downtime_id.\n### Arguments\n\
        * **`id`** [*required*]: The integer id of the downtime to be updated\n* **`scope`**\
        \ [*required*]: The scope to which the downtime applies, e.g. 'host:app2'.\n\
        \  Provide multiple scopes as a comma-separated list, e.g. 'env:dev,env:prod'.\n\
        \  The resulting downtime applies to sources that matches ALL provided scopes\n\
        \  (i.e. env:dev AND env:prod), NOT any of them.\n\n* **`monitor_tags`** [*optional*,\
        \ *default*=**no monitor tag filter**]: A comma-separated\n  list of monitor\
        \ tags, i.e. tags that are applied directly to monitors, *not* tags that\n\
        \  are used in monitor queries (which are filtered by the `scope` parameter),\
        \ to which\n  the downtime applies. The resulting downtime applies to monitors\
        \ that match ALL provided\n  monitor tags (i.e. `service:postgres` **AND**\
        \ `team:frontend`), NOT any of them.\n\n* **`monitor_id`** [*optional*, *default*=**None**]:\
        \ A single monitor to which the downtime\n  applies. If not provided, the\
        \ downtime applies to all monitors.\n\n* **`start`** [*optional*, *default*\
        \ = **original start**]: POSIX timestamp to start\n  the downtime.\n\n* **`end`**\
        \ [*optional*, *default* = **original end**]: POSIX timestamp to end the downtime.\n\
        \  If not provided, the downtime is in effect indefinitely (i.e. until you\
        \ cancel it).\n\n* **`message`** [*required*, *default* = **original message**]:\
        \ A message to include with\n  notifications for this downtime. Email notifications\
        \ can be sent to specific users by\n  using the same '@username' notation\
        \ as events\n\n* **`timezone`** [*optional*, default = **original timezone**\
        \ ]: The timezone for the downtime.\n* **`recurrence`** [*optional*, *default*\
        \ = **original recurrence**]: An object defining the\n  recurrence of the\
        \ downtime with a variety of parameters:\n\n    * **`type`** the type of recurrence.\
        \ Choose from: `days`, `weeks`, `months`, `years`.\n\n    * **`period`** how\
        \ often to repeat as an integer. For example to repeat every 3 days,\n   \
        \   select a type of `days` and a period of `3`.\n\n    * **`week_days`**\
        \ (optional) a list of week days to repeat on. Choose from: `Mon`, `Tue`,\n\
        \      `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is\
        \ `weeks`.\n      **First letter must be capitalized.**\n\n    * **`until_occurrences`**\
        \ (optional) how many times the downtime is rescheduled.\n      **`until_occurrences`\
        \ and `until_date`** are mutually exclusive\n\n    * **`until_date`** (optional)\
        \ the date at which the recurrence should end as a POSIX\n      timestmap.\
        \ **`until_occurrences` and `until_date`** are mutually exclusive"
      operationId: UpdateDowntime
      parameters:
      - description: ID of the downtime to update
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime'
        description: Downtime request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Downtime not found error
      summary: Update a downtime
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/events:
    get:
      description: "### Overview\nThe event stream can be queried and filtered by\
        \ time, priority, sources and tags.\nNote: if the event you\u2019re querying\
        \ contains markdown formatting of any kind, you may see characters such as\
        \ %,\\,n in your output.\n### Arguments\n* **`start`** [*required*]:\n   \
        \ POSIX timestamp.\n\n* **`end`** [*required*]:\n    POSIX timestamp.\n\n\
        * **`priority`** [*optional*, *default*=**None**]:\n    Priority of your events:\
        \ **low** or **normal**.\n\n* **`sources`** [*optional*, *default*=**None**]:\n\
        \    A comma separated string of sources.\n\n* **`tags`** [*optional*, *default*=**None**]:\n\
        \    A comma separated string of tags. To use a negative tag filter, prefix\
        \ your tag with `-`.\n    See the Event Stream documentation to learn more.\n\
        \n* **`unaggregated`** [*optional*, *default*=*false*]:\n    Set unaggregated\
        \ to `true` to return all events within the specified [`start`,`end`] timeframe.\
        \ Otherwise if an event is aggregated to a parent event with a timestamp outside\
        \ of the timeframe, it won't be available in the output."
      operationId: ListEvents
      parameters:
      - description: POSIX timestamp.
        in: query
        name: start
        required: true
        schema:
          format: int64
          type: integer
      - description: POSIX timestamp.
        in: query
        name: end
        required: true
        schema:
          format: int64
          type: integer
      - description: 'Priority of your events: **low** or **normal**.'
        in: query
        name: priority
        required: false
        schema:
          enum:
          - low
          - normal
          type: string
          x-enum-varnames:
          - LOW
          - NORMAL
      - description: A comma separated string of sources.
        in: query
        name: sources
        schema:
          type: string
      - description: A comma separated list indicating what tags, if any, should be
          used to filter the list of monitorsby scope, e.g. host:host0.
        in: query
        name: tags
        required: false
        schema:
          type: string
      - description: Set unaggregated to `true` to return all events within the specified
          [`start`,`end`] timeframe. Otherwise if an event is aggregated to a parent
          event with a timestamp outside of the timeframe, it won't be available in
          the output.
        in: query
        name: unaggregated
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Query the event stream.
      tags:
      - Events
    post:
      description: "### Overview\nThis endpoint allows you to post events to the stream.\
        \ Tag them, set priority and event aggregate them with other events.\n###\
        \ Arguments\n* **`title`** [*required*]:\n    The event title. *Limited to\
        \ 100 characters.*\n    Use `msg_title` with [the Datadog Ruby library][1].\n\
        \n* **`text`** [*required*]:\n    The body of the event. *Limited to 4000\
        \ characters.*\n    The text supports [markdown][2].\n    Use `msg_text` with\
        \ [the Datadog Ruby library][1]\n\n* **`date_happened`** [*optional*, *default*\
        \ = **now**]:\n    POSIX timestamp of the event. Must be sent as an integer\
        \ (i.e. no quotes). *Limited to events no older than 1 year, 24 days (389\
        \ days)*\n\n* **`priority`** [*optional*, *default* = **normal**]:\n    The\
        \ priority of the event: **normal** or **low**.\n\n* **`host`** [*optional*,\
        \ *default*=**None**]:\n    Host name to associate with the event. Any tags\
        \ associated with the host are also applied to this event.\n\n* **`tags`**\
        \ [*optional*, *default*=**None**]:\n    A list of tags to apply to the event.\n\
        \n* **`alert_type`** [*optional*, *default* = **info**]:\n    If it's an alert\
        \ event, set its type between: **error**, **warning**, **info**, and **success**.\n\
        \n* **`aggregation_key`** [*optional*, *default*=**None**]:\n    An arbitrary\
        \ string to use for aggregation. *Limited to 100 characters.*\n    If you\
        \ specify a key, all events using that key are grouped together in the Event\
        \ Stream.\n\n* **`source_type_name`** [*optional*, *default*=**None**]:\n\
        \    The type of event being posted.\n    Options: **nagios**, **hudson**,\
        \ **jenkins**, **my_apps**, **chef**, **puppet**, **git**, **bitbucket**...\n\
        \    [Complete list of source attribute values][3]\n\n* **`related_event_id`**\
        \ [*optional*, *default*=**None**]:\n    ID of the parent event. Must be sent\
        \ as an integer (i.e. no quotes).\n\n* **`device_name`** [*optional*, *default*=**None**]:\n\
        \    A list of device names to post the event with."
      operationId: CreateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Event request object
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Post an event
      tags:
      - Events
      x-codegen-request-body-name: body
  /api/v1/events/{event_id}:
    get:
      description: "### Overview\nThis endpoint allows you to query for event details.\n\
        Note: if the event you\u2019re querying contains markdown formatting of any\
        \ kind, you may see characters such as %,\\,n in your output."
      operationId: GetEvent
      parameters:
      - description: The id of the event
        in: path
        name: event_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Item Not Found
      summary: Get an event
      tags:
      - Events
  /api/v1/graph/snapshot:
    get:
      description: "### Overview\nTake graph snapshots\n### Arguments\n* **`metric_query`**\
        \ [*required*]: The metric query.\n* **`start`** [*required*]: The POSIX timestamp\
        \ of the start of the query.\n* **`end`** [*required*]: The POSIX timestamp\
        \ of the end of the query.\n* **`event_query`** [*optional*, *default* = **None**]:\
        \ A query that adds event bands to the graph.\n* **`graph_def`** [*optional*,\
        \ *default* = **None**]: A JSON document defining the graph.\n  graph_def\
        \ can be used instead of metric_query. The JSON document uses the\n  [grammar\
        \ defined here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)\n\
        \  and should be formatted to a single line then URLEncoded.\n\n* **`title`**\
        \ [*optional*, *default* = **None**]: A title for the graph.\n  If no title\
        \ is specified, the graph doesn\u2019t have a title."
      operationId: GetGraphSnapshot
      parameters:
      - description: The metric query.
        in: query
        name: metric_query
        required: true
        schema:
          type: string
      - description: The POSIX timestamp of the start of the query.
        in: query
        name: start
        required: true
        schema:
          format: int64
          type: integer
      - description: The POSIX timestamp of the end of the query.
        in: query
        name: end
        required: true
        schema:
          format: int64
          type: integer
      - description: A query that adds event bands to the graph.
        in: query
        name: event_query
        required: false
        schema:
          type: string
      - description: A JSON document defining the graph. graph_def can be used instead
          of metric_query. The JSON document uses the [grammar defined here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)
          and should be formatted to a single line then URLEncoded.
        in: query
        name: graph_def
        required: false
        schema:
          type: string
      - description: "A title for the graph. If no title is specified, the graph doesn\u2019\
          t have a title."
        in: query
        name: title
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphSnapshot'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Take graph snapshots
      tags:
      - Snapshots
  /api/v1/host/{host_name}/mute:
    post:
      description: '## Mute a Host

        ### Arguments:

        * **`end`** [*optional*, *default*= *None*]: POSIX timestamp when the host
        is unmuted. If omitted, the host remains muted until explicitly unmuted.

        * **`message`** [*optional*, *default*= *None*]: Message to associate with
        the muting of this host.

        * **`override`** [*optional*, *default*= *False*]: If true and the host is
        already muted, replaces existing host mute settings.'
      operationId: MuteHost
      parameters:
      - description: Name of the host to mute
        in: path
        name: host_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostMuteSettings'
        description: Mute a host
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMuteResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Invalid Parameter Error
      summary: Mute a Host
      tags:
      - Hosts
      x-codegen-request-body-name: body
  /api/v1/host/{host_name}/unmute:
    post:
      description: '### Unmute a Host

        This endpoint takes no JSON arguments.'
      operationId: UnmuteHost
      parameters:
      - description: Name of the host to unmute
        in: path
        name: host_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMuteResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Invalid Parameter Error
      summary: Unmute a Host
      tags:
      - Hosts
      x-codegen-request-body-name: body
  /api/v1/hosts:
    get:
      description: '## Search Hosts

        This endpoint allows searching for hosts by name, alias, or tag. Hosts live
        within the past 3 hours are included. Results are paginated with a max of
        1000 results at a time.

        ### Arguments:

        * **`filter`** [*optional*, *default* = **None**]: Query string to filter
        search results.

        * **`sort_field`** [*optional*, *default* = **cpu**]: Sort hosts by the given
        field. Options: **status, apps, cpu, iowait, load**

        * **`sort_dir`** [*optional*, *default* = **desc**]: Direction of sort. Options:
        **asc, desc**

        * **`start`** [*optional*, *default* = **0**]: Host result to start search
        from.

        * **`count`** [*optional*, *default* = **100**]: Number of host results to
        return. Max 1000.

        * **`from`** [*optional*, *default* = **now - 2 hours**]: Number of seconds
        since UNIX epoch from which you want to search your hosts.'
      operationId: GetAllHosts
      parameters:
      - description: String to filter search results
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: Sort hosts by this field
        in: query
        name: sort_field
        required: false
        schema:
          type: string
      - description: Direction of sort
        in: query
        name: sort_dir
        required: false
        schema:
          type: string
      - description: Host result to start search from
        in: query
        name: start
        required: false
        schema:
          format: int64
          type: integer
      - description: Number of hosts to return
        in: query
        name: count
        required: false
        schema:
          format: int64
          type: integer
      - description: Number of seconds from which you want to search your hosts
        in: query
        name: from
        required: false
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Invalid Parameter Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Host Not Found Error
      summary: Get all hosts for your organization
      tags:
      - Hosts
  /api/v1/hosts/totals:
    get:
      description: '## Get Host totals

        This endpoint returns the total number of active and up hosts in your Datadog
        account. Active means the host has reported in the past hour, and up means
        it has reported in the past two hours.

        ### Arguments:

        * **`from`** [*optional*, *default*= **now - 2 hours**]:  Number of seconds
        since UNIX epoch from which you want to get the total number of active and
        up hosts.'
      operationId: GetHostTotals
      parameters:
      - description: Number of seconds from which you want to get total number of
          active hosts
        in: query
        name: from
        required: false
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTotals'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Invalid Parameter Error
      summary: Get total number of active hosts in your Datadog Account
      tags:
      - Hosts
  /api/v1/integration/aws:
    delete:
      description: "### Overview\nDelete the AWS Account matching the specified account_id\
        \ and role_name parameters\n### Arguments\n* **`account_id`** [*required*,\
        \ *default* = **None**]: Delete the AWS account that\n  matches this account_id.\n\
        \n* **`role_name`** [*required*, *default* = **None**]: Delete the AWS account\
        \ that\n  matches this role_name."
      operationId: DeleteAWSAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Item Not Found
      summary: Delete an AWS Account
      tags:
      - AWSIntegration
      x-codegen-request-body-name: body
    get:
      description: "### Overview\nGet All Installed AWS Accounts\n### Arguments\n\
        * **`account_id`** [*optional*, *default* = **None**]: Only return AWS accounts\
        \ that\n  matches this account_id.\n\n* **`role_name`** [*optional*, *default*\
        \ = **None**]: Only return AWS accounts that\n  matches this role_name.\n\n\
        * **`access_key_id`** [*optional*, *default* = **None**]: Only return AWS\
        \ accounts that\n  matches this access_key_id."
      operationId: GetAllAWSAccounts
      parameters:
      - description: Only return AWS accounts that matches this account_id.
        in: query
        name: account_id
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this role_name.
        in: query
        name: role_name
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this access_key_id.
        in: query
        name: access_key_id
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Item Not Found
      summary: Get Installed AWS Accounts
      tags:
      - AWSIntegration
    post:
      description: "### Overview\nCreate the AWS Account with the provided values\n\
        ### Arguments\n* **`account_id`** [*required*]: Your AWS Account ID without\
        \ dashes. Consult the Datadog AWS\n  integration to learn more about your\
        \ AWS account ID.\n\n* **`role_name`** [*required*]: Your Datadog role delegation\
        \ name. For more information about you\n  AWS account Role name, see the Datadog\
        \ AWS integration configuration info.\n\n* **`access_key_id`** [*optional*,\
        \ *default* = **None**]: If your AWS account is a GovCloud or\n  China account,\
        \ enter the corresponding Access Key ID.\n\n* **`filter_tags`** [*optional*,\
        \ *default* = **None**]: The array of EC2 tags (in the form key:value)\n \
        \ defines a filter that Datadog uses when collecting metrics from EC2. Wildcards,\
        \ such as ?\n  (for single characters) and * (for multiple characters) can\
        \ also be used. Only hosts that match one\n  of the defined tags will be imported\
        \ into Datadog. The rest will be ignored. Host matching a given\n  tag can\
        \ also be excluded by adding ! before the tag.\n  e.x. env:production,instance-type:c1.*,!region:us-east-1\
        \ For more information on EC2 tagging,\n  see the AWS tagging documentation\n\
        \n* **`host_tags`** [*optional*, *default* = **None**]: Array of tags (in\
        \ the form key:value) to add\n  to all hosts and metrics reporting through\
        \ this integration.\n\n* **`account_specific_namespace_rules`** [*optional*,\
        \ *default* = **None**]: An object (in the form\n  {\"namespace1\":true/false,\
        \ \"namespace2\":true/false}) that enables or disables metric collection for\n\
        \  specific AWS namespaces for this AWS account only. A list of namespaces\
        \ can be found at the\n  /v1/integration/aws/available_namespace_rules endpoint."
      operationId: CreateAWSAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Create an AWS Account
      tags:
      - AWSIntegration
      x-codegen-request-body-name: body
    put:
      description: "### Overview\nUpdate the AWS Account based on the provided values\n\
        ### Arguments\n* **`account_id`** [*required if role_name is specified*, *default*\
        \ = **None**]: Only return AWS accounts that\n  matches this account_id.\n\
        \n* **`role_name`** [*required if account_id is specified*, *default* = **None**]:\
        \ Only return AWS accounts that\n  matches this role_name.\n\n* **`access_key_id`**\
        \ [*required if none of the other two options are specified*, *default* =\
        \ **None**]: Only return AWS accounts that\n  matches this access_key_id.\n\
        \n### Payload\n* **`account_id`** [*required*]: Your AWS Account ID without\
        \ dashes. Consult the Datadog AWS\n  integration to learn more about your\
        \ AWS account ID.\n\n* **`role_name`** [*required*]: Your Datadog role delegation\
        \ name. For more information about you\n  AWS account Role name, see the Datadog\
        \ AWS integration configuration info.\n\n* **`access_key_id`** [*optional*,\
        \ *default* = **None**]: If your AWS account is a GovCloud or\n  China account,\
        \ enter the corresponding Access Key ID.\n\n* **`filter_tags`** [*optional*,\
        \ *default* = **None**]: The array of EC2 tags (in the form key:value)\n \
        \ defines a filter that Datadog uses when collecting metrics from EC2. Wildcards,\
        \ such as ?\n  (for single characters) and * (for multiple characters) can\
        \ also be used. Only hosts that match one\n  of the defined tags will be imported\
        \ into Datadog. The rest will be ignored. Host matching a given\n  tag can\
        \ also be excluded by adding ! before the tag.\n  e.g. env:production,instance-type:c1.*,!region:us-east-1\
        \ For more information on EC2 tagging,\n  see the AWS tagging documentation.\n\
        \n* **`host_tags`** [*optional*, *default* = **None**]: Array of tags (in\
        \ the form key:value) to add\n  to all hosts and metrics reporting through\
        \ this integration.\n\n* **`account_specific_namespace_rules`** [*optional*,\
        \ *default* = **None**]: An object (in the form\n  {\"namespace1\":true/false,\
        \ \"namespace2\":true/false}) that enables or disables metric collection for\n\
        \  specific AWS namespaces for this AWS account only. A list of namespaces\
        \ can be found at the\n  /v1/integration/aws/available_namespace_rules endpoint."
      operationId: UpdateAWSAccount
      parameters:
      - description: Only return AWS accounts that matches this account_id.
        in: query
        name: account_id
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this role_name. *It is
          required if account_id is specified.*
        in: query
        name: role_name
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this access_key_id. *It
          required if none of the other two options are specified.*
        in: query
        name: access_key_id
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Update an AWS Account
      tags:
      - AWSIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/available_namespace_rules:
    get:
      description: '### Overview

        List all namespace rules for a given Datadog-AWS integration.'
      operationId: ListAvailableAWSNamespaces
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  value:
                  - namespace1
                  - namespace2
                  - namespace3
                items:
                  type: string
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: List available namespaces.
      tags:
      - AWSIntegration
  /api/v1/integration/aws/generate_new_external_id:
    put:
      description: "###Overview\nGenerate new AWS external ID for a specific integrated\
        \ account\n### Arguments\n* **`account_id`** [*required*]: Generate new external\
        \ ID for the AWS account that\n  matches this account_id.\n\n* **`role_name`**\
        \ [*required*]: Generate new external ID for the AWS account that\n  matches\
        \ this role_name."
      operationId: GenerateNewAWSExternalID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: Generate New AWS External ID request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Generate New External ID
      tags:
      - AWSIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs:
    delete:
      description: '### Overview

        Delete a Lambda ARN of a Lambda created for the Datadog-AWS log collection
        in your Datadog account.

        ### Arguments

        * **`account_id`** [*required*, *default* = **None**]: Your AWS Account ID
        without dashes.

        * **`lambda_arn`** [*required*, *default* = **None**]: ARN of the Lambda to
        be deleted.'
      operationId: DeleteAWSLambdaARN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: Check AWS Log Lambda Async request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Delete a AWS Lambda ARN from your Datadog account.
      tags:
      - AWSLogsIntegration
      x-codegen-request-body-name: body
    get:
      description: '### Overview

        List all Datadog-AWS Logs integrations configured in your Datadog account.'
      operationId: AWSLogsList
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                - account_id: '123456789101'
                  lambdas: []
                  services:
                  - s3
                  - elb
                  - elbv2
                  - cloudfront
                  - redshift
                  - lambda
                items:
                  $ref: '#/components/schemas/AWSLogsListResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: List configured AWS log integrations.
      tags:
      - AWSLogsIntegration
    post:
      description: '### Overview

        Attach the Lambda ARN of the Lambda created for the Datadog-AWS log collection
        to your AWS account ID to enable log collection.

        ### Arguments

        * **`account_id`** [*required*, *default* = **None**]: Your AWS Account ID
        without dashes.

        * **`lambda_arn`** [*required*, *default* = **None**]: ARN of the Datadog
        Lambda created during the Datadog-Amazon Web services Log collection setup.'
      operationId: AddAWSLambdaARN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: Check AWS Log Lambda Async request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Add a AWS Lambda ARN to your Datadog account.
      tags:
      - AWSLogsIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/check_async:
    post:
      description: '### Overview

        Check function to see if a lambda_arn exists within an account. This sends
        a job on our side if it does not exist, then immediately returns the status
        of that job. Subsequent requests will always repeat the above, so this endpoint
        can be polled intermittently instead of blocking.

        - Returns a status of ''created'' when it''s checking if the Lambda exists
        in the account.

        - Returns a status of ''waiting'' while checking.

        - Returns a status of ''checked and ok'' if the Lambda exists.

        - Returns a status of ''error'' if the Lambda does not exist.

        ### Arguments

        * **`account_id`** [*required*, *default* = **None**]: Your AWS Account ID
        without dashes.

        * **`lambda_arn`** [*required*, *default* = **None**]: ARN of the Lambda to
        be checked.'
      operationId: AWSLogsCheckLambdaAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: Check AWS Log Lambda Async request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSLogsAsyncResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Check function to see if a lambda_arn exists within an account.
      tags:
      - AWSLogsIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/services:
    get:
      description: '### Overview

        Get the list of current AWS services that Datadog offers automatic log collection.
        Use returned service IDs with the services parameter for the Enable an AWS
        service log collection API endpoint.'
      operationId: AWSLogsServicesList
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                - id: s3
                  label: S3 Access Logs
                - id: elb
                  label: Classic ELB Access Logs
                - id: elbv2
                  label: Application ELB Access Logs
                - id: cloudfront
                  label: CloudFront Access Logs
                - id: redshift
                  label: Redshift Logs
                - id: lambda
                  label: Lambda Cloudwatch Logs
                items:
                  $ref: '#/components/schemas/AWSLogsListServicesResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Get list of AWS log ready services.
      tags:
      - AWSLogsIntegration
    post:
      description: '### Overview

        Enable automatic log collection for a list of services. This should be run
        after running ''AddAWSLambdaARN'' to save the config.

        ### Arguments

        * **`account_id`** [*required*, *default* = **None**]: Your AWS Account ID
        without dashes.

        * **`services`** [*required*, *default* = **None**]: Array of services IDs
        set to enable automatic log collection. Discover the list of available services
        with the Get list of AWS log ready services API endpoint'
      operationId: EnableAWSLogServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSLogsServicesRequest'
        description: Enable AWS Log Services request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Enable Automatic Log collection for your AWS services.
      tags:
      - AWSLogsIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/services_async:
    post:
      description: '### Overview

        Test if permissions are present to add log-forwarding triggers for the given
        services + AWS account. Input is the same as for EnableAWSLogServices. Done
        async, so can be repeatedly polled in a non-blocking fashion until the async
        request completes

        - Returns a status of ''created'' when it''s checking if the permissions exists
        in the AWS account.

        - Returns a status of ''waiting'' while checking.

        - Returns a status of ''checked and ok'' if the Lambda exists.

        - Returns a status of ''error'' if the Lambda does not exist.

        ### Arguments

        * **`account_id`** [*required*, *default* = **None**]: Your AWS Account ID
        without dashes.

        * **`services`** [*required*, *default* = **None**]: Array of services IDs
        set to enable automatic log collection. Discover the list of available services
        with the Get list of AWS log ready services API endpoint'
      operationId: AWSLogsCheckServicesAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSLogsServicesRequest'
        description: AWS Logs Async Services check request body
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSLogsAsyncResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Asynchronous check for permissions for AWS log lambda config.
      tags:
      - AWSLogsIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/azure:
    delete:
      description: '### Overview

        Delete a given Datadog-Azure integration.

        ### Arguments

        * **`tenant_name`** [*required*, *default* = **None**]: Your Azure Active
        Directory ID.

        * **`client_id`** [*required*, *default* = **None**]: Your Azure web application
        ID.'
      operationId: DeleteAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Delete a given Datadog-Azure integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Delete an Azure Integration from your Datadog account.
      tags:
      - AzureIntegration
      x-codegen-request-body-name: body
    get:
      description: '### Overview

        List all Datadog-Azure integrations configured in your Datadog account.'
      operationId: ListAzureIntegration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: List configured Azure integrations.
      tags:
      - AzureIntegration
    post:
      description: '### Overview

        Create a Datadog-Azure integration.

        ### Arguments

        * **`tenant_name`** [*required*, *default* = **None**]: Your Azure Active
        Directory ID.

        * **`client_id`** [*required*, *default* = **None**]: Your Azure web application
        ID.

        * **`client_secret`** [*required*, *default* = **None**]: Your Azure web application
        secret key.

        * **`host_filters`** [*optional*, *default* = **None**]: Limit the Azure instances
        that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog.'
      operationId: CreateAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Create a Datadog-Azure integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Add a Azure integration to your Datadog account.
      tags:
      - AzureIntegration
      x-codegen-request-body-name: body
    put:
      description: '### Overview

        Update an Datadog-Azure integration. Requires an existing tenant_name and
        client_id. Any other fields supplied will overwrite existing values. To overwrite
        tenant_name or client_id, use new_tenant_name and new_client_id. To leave
        a field unchanged, do not supply that field in the payload.

        ### Arguments

        * **`tenant_name`** [*required*, *default* = **None**]: Your existing Azure
        Active Directory ID.

        * **`new_tenant_name`** [*optional*, *default* = **None**]: Your new Azure
        Active Directory ID.

        * **`client_id`** [*required*, *default* = **None**]: Your existing Azure
        web application ID.

        * **`new_client_id`** [*optional*, *default* = **None**]: Your new Azure web
        application ID.

        * **`client_secret`** [*optional*, *default* = **None**]: Your Azure web application
        secret key.

        * **`host_filters`** [*optional*, *default* = **None**]: Limit the Azure instances
        that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog.'
      operationId: UpdateAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Update a Datadog-Azure integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Update an Azure integration to your Datadog account.
      tags:
      - AzureIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/azure/host_filters:
    post:
      description: '### Overview

        Update the defined list of host filters for a given Datadog-Azure integration.

        ### Arguments

        * **`tenant_name`** [*required*, *default* = **None**]: Your Azure Active
        Directory ID.

        * **`client_id`** [*required*, *default* = **None**]: Your Azure web application
        ID.

        * **`host_filters`** [*required*, *default* = **None**]: Limit the Azure instances
        that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog.'
      operationId: AzureUpdateHostFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Update a Datadog-Azure integrations host filters.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Update the defined list of host filters for a given Datadog-Azure integration.
      tags:
      - AzureIntegration
      x-codegen-request-body-name: body
  /api/v1/integration/gcp:
    delete:
      description: '### Overview

        Delete a given Datadog-GCP integration.

        ### Arguments

        * **`project_id`** [*required*, *default* = **None**]: Your Google Cloud project
        ID to be deleted.

        * **`client_email`** [*required*, *default* = **None**]: Your client email
        associated with the integration to be deleted.'
      operationId: DeleteGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Delete a given Datadog-GCP integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Delete a GCP Integration from your Datadog account.
      tags:
      - GCPIntegration
      x-codegen-request-body-name: body
    get:
      description: '### Overview

        List all Datadog-GCP integrations configured in your Datadog account.'
      operationId: ListGCPIntegration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GCPAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: List configured GCP integrations.
      tags:
      - GCPIntegration
    post:
      description: '### Overview

        Create a Datadog-GCP integration.

        ### Arguments

        * **`type`** [*required*, *default* = **None**]: The value for service_account
        found in your JSON service account key.

        * **`project_id`** [*required*, *default* = **None**]: Your Google Cloud project
        ID found in your JSON service account key.

        * **`private_key_id`** [*required*, *default* = **None**]: Your private key
        ID found in your JSON service account key.

        * **`private_key`** [*required*, *default* = **None**]: Your private key name
        found in your JSON service account key.

        * **`client_email`** [*required*, *default* = **None**]: Your email found
        in your JSON service account key.

        * **`client_id`** [*required*, *default* = **None**]: Your ID found in your
        JSON service account key.

        * **`auth_uri`** [*required*, *default* = **None**]: Should be https://accounts.google.com/o/oauth2/auth.

        * **`token_uri`** [*required*, *default* = **None**]: Should be https://accounts.google.com/o/oauth2/token.

        * **`auth_provider_x509_cert_url`** [*required*, *default* = **None**]: Should
        be https://www.googleapis.com/oauth2/v1/certs.

        * **`client_x509_cert_url`** [*required*, *default* = **None**]: Should be
        https://www.googleapis.com/robot/v1/metadata/x509/<CLIENT_EMAIL> where <CLIENT_EMAIL>
        is the email found in your JSON service account key.

        * **`host_filters`** [*optional*, *default* = **None**]: Limit the GCE instances
        that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog.

        * **`automute`** [*optional*, *default* = false]: Silence monitors for expected
        GCE instance shutdowns.'
      operationId: CreateGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Create a Datadog-Azure integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Add a GCP integration to your Datadog account.
      tags:
      - GCPIntegration
      x-codegen-request-body-name: body
    put:
      description: '### Overview

        Update a Datadog-GCP integrations host_filters and/or automute. Requires a
        project_id and client_email, however these fields cannot be updated. If you
        need to update these fields please delete and use the create (POST) endpoint.
        The unspecified fields will keep their original values.

        ### Arguments

        * **`project_id`** [*required*, *default* = **None**]: Your Google Cloud project
        ID associated with the integration to be updated.

        * **`client_email`** [*required*, *default* = **None**]: Your client email
        associated with the integration to be updated.

        * **`host_filters`** [*optional*, *default* = **None**]: Limit the GCE instances
        that are pulled into Datadog by using tags. Only hosts that match one of the
        defined tags are imported into Datadog.

        * **`automute`** [*optional*, *default* = false]: Silence monitors for expected
        GCE instance shutdowns.'
      operationId: UpdateGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Update a Datadog-GCP integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Update a GCP integration in your Datadog account.
      tags:
      - GCPIntegration
      x-codegen-request-body-name: body
  /api/v1/logs/config/pipeline-order:
    get:
      description: '## Overview

        Get the current order of your pipelines.

        ## Arguments

        This endpoint takes no JSON arguments.'
      operationId: GetLogsPipelineOrder
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelinesOrder'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get the current order of your pipelines.
      tags:
      - LogsPipelines
    put:
      description: '## Overview

        Update the order of your pipelines. Since logs are processed sequentially,
        reordering a pipeline may change the structure and content of the data processed
        by other pipelines and their processors.

        **Note**: Using the PUT method updates your pipeline order by replacing your
        current order with the new one sent to your Datadog organization.

        ## Arguments

        - **`pipeline_ids`** [*required*]: Ordered Array of <PIPELINE_ID> strings,
        the order of pipeline IDs in the array define the overall Pipelines order
        for Datadog.'
      operationId: UpdateLogsPipelineOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipelinesOrder'
        description: Object containing the new ordered list of pipeline IDs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelinesOrder'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Unprocessable Entity
      summary: Update the order of your pipelines.
      tags:
      - LogsPipelines
      x-codegen-request-body-name: body
  /api/v1/logs/config/pipelines:
    get:
      description: '## Overview

        Get all pipelines from your organization.

        ## Arguments

        This endpoint takes no JSON arguments.'
      operationId: GetAllLogsPipelines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelineList'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get all pipelines from your organization.
      tags:
      - LogsPipelines
    post:
      description: '## Overview

        Create a Pipeline in your organization.

        ## Arguments

        - **`name`** [*required*]: Your pipeline name.

        - **`is_enabled`** [*optional*, default=`False`]: Boolean value to enable
        your pipeline.

        - **`filter.query`** [*optional*]: Defines your pipeline filter. Only logs
        that match the filter criteria are processed by this pipeline.

        - **`processors`** [*optional*]: Ordered array of processors or nested pipelines.'
      operationId: CreateLogsPipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipeline'
        description: Definition of the new pipeline
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Unprocessable Entity
      summary: Create a pipeline in your organization.
      tags:
      - LogsPipelines
      x-codegen-request-body-name: body
  /api/v1/logs/config/pipelines/{pipeline_id}:
    delete:
      description: '## Overview

        Delete a given pipeline from your organization.

        ## Arguments

        This endpoint takes no JSON arguments.'
      operationId: DeleteLogsPipeline
      parameters:
      - description: ID of the pipeline to delete
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Delete a given pipeline from your organization.
      tags:
      - LogsPipelines
    get:
      description: '## Overview

        Get a specific pipeline from your organization.

        ## Arguments

        This endpoint takes no JSON arguments.'
      operationId: GetLogsPipeline
      parameters:
      - description: ID of the pipeline to get
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get a specific pipeline from your organization.
      tags:
      - LogsPipelines
    put:
      description: "## Overview\nUpdate a given pipeline configuration to change it\u2019\
        s processors or their order.\n## Arguments\n**Note**: Using this method updates\
        \ your pipeline configuration by **replacing** your current configuration\
        \ with the new one sent to your Datadog organization.\n- **`name`** [*required*]:\
        \ Your pipeline name.\n- **`is_enabled`** [*optional*, default=`False`]: Boolean\
        \ value to enable your pipeline.\n- **`filter.query`** [*optional*]: Defines\
        \ your pipeline filter. Only logs that match the filter criteria are processed\
        \ by this pipeline.\n- **`processors`** [*optional*]: Ordered array of processors\
        \ or nested pipelines."
      operationId: UpdateLogsPipeline
      parameters:
      - description: ID of the pipeline to delete
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipeline'
        description: New definition of the pipeline
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Unprocessable Entity
      summary: Update a pipeline in your organization.
      tags:
      - LogsPipelines
      x-codegen-request-body-name: body
  /api/v1/metrics:
    get:
      description: Get the list of actively reporting metrics from a given time until
        now.
      operationId: GetAllActiveMetrics
      parameters:
      - description: Seconds since the Unix epoch
        in: query
        name: from
        required: true
        schema:
          format: int64
          type: integer
      - description: Hostname for filtering the list of metrics returned. If set,
          metrics retrieved are those with the corresponding hostname tag.
        in: query
        name: host
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Get active metrics list
      tags:
      - Metrics
  /api/v1/metrics/{metric_name}:
    get:
      description: Get metadata about a specific metric.
      operationId: GetMetricMetadata
      parameters:
      - description: Name of the metric for which to get metadata
        in: path
        name: metric_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricMetadata'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Get metric metadata
      tags:
      - Metrics
    put:
      description: Edit metadata of a specific metric.
      operationId: EditMetricMetadata
      parameters:
      - description: Name of the metric for which to edit metadata
        in: path
        name: metric_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricMetadata'
        description: New metadata
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricMetadata'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Edit metric metadata
      tags:
      - Metrics
      x-codegen-request-body-name: body
  /api/v1/monitor:
    get:
      description: '### Overview

        Get details about the specified monitor from your organization.

        ### Arguments

        * **`group_states`** [*optional* *default*=**None**] If this argument is set,
        the returned data includes additional information (if available) regarding
        the specified group states, including the last notification timestamp, last
        resolution timestamp and details about the last time the monitor was triggered.
        The argument should include a string list indicating what, if any, group states
        to include. Choose one or more from all, alert, warn, or no data. Example
        ''alert,warn''

        * **`name`** [*optional* *default*==**None**] A string to filter monitors
        by name

        * **`tags`** [*optional* *default*==**None**] A comma separated list indicating
        what tags, if any, should be used to filter the list of monitorsby scope,
        e.g. host:host0

        * **`monitor_tags`** [*optional* *default*==**None**] A comma separated list
        indicating what service and/or custom tags, if any, should be used to filter
        the list of monitors. Tags created in the Datadog UI automatically have the
        service key prepended (e.g. service:my-app)

        * **`with_downtimes`** [*optional* *default*==**true**] If this argument is
        set to true, then the returned data includes all current downtimes for each
        monitor.'
      operationId: GetAllMonitors
      parameters:
      - description: When specified, shows additional information about the group
          states. Choose one or more from `all`, `alert`, `warn`, and `no data`.
        in: query
        name: group_states
        required: false
        schema:
          type: string
      - description: A string to filter monitors by name.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: A comma separated list indicating what tags, if any, should be
          used to filter the list of monitorsby scope, e.g. host:host0.
        in: query
        name: tags
        required: false
        schema:
          type: string
      - description: A comma separated list indicating what service and/or custom
          tags, if any, should be used to filter the list of monitors. Tags created
          in the Datadog UI automatically have the service key prepended (e.g. service:my-app).
        in: query
        name: monitor_tags
        required: false
        schema:
          type: string
      - description: If this argument is set to true, then the returned data includes
          all current downtimes for each monitor.
        in: query
        name: with_downtimes
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Monitor'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Get details about the specified monitor.
      tags:
      - Monitors
    post:
      description: '### Overview

        Create a monitor using the specified options

        ### Arguments

        * **`Monitor`** [*required*] The Monitor Object to create'
      operationId: CreateMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Monitor request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Create a new Monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/validate:
    post:
      description: '### Overview

        Validate the monitor provided in the request

        ### Arguments

        * **`Monitor`** [*required*] The Monitor Object to validate summary: Validate
        the provided monitor'
      operationId: ValidateMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Monitor request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Invalid JSON
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/{monitor_id}:
    delete:
      description: '### Overview

        Delete the specified monitor

        ### Arguments

        * **`monitor_id`** [*required*]: The id of the monitor.'
      operationId: DeleteMonitor
      parameters:
      - description: The id of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedMonitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Item not found error
      summary: Delete the specified monitor.
      tags:
      - Monitors
    get:
      description: '### Overview

        Get details about the specified monitor from your organization.

        ### Arguments

        * **`monitor_id`** [*required*]: The id of the monitor.

        * **`group_states`** [*optional* *default*=**None**] If this argument is set,
        the returned data includes additional information (if available) regarding
        the specified group states, including the last notification timestamp, last
        resolution timestamp and details about the last time the monitor was triggered.
        The argument should include a string list indicating what, if any, group states
        to include. Choose one or more from all, alert, warn, or no data. Example
        ''alert,warn'''
      operationId: GetMonitor
      parameters:
      - description: The id of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      - description: When specified, shows additional information about the group
          states. Choose one or more from `all`, `alert`, `warn`, and `no data`.
        in: query
        name: group_states
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Get details about the specified monitor.
      tags:
      - Monitors
    put:
      description: '### Overview

        Edit the specified monitor.

        ### Arguments

        * **`monitor_id`** [*required*]: The id of the monitor.'
      operationId: EditMonitor
      parameters:
      - description: The id of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Monitor request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Monitor Not Found error
      summary: Edit the specified monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/org:
    get:
      description: '## Overview

        Gets information about your organization'
      operationId: GetOrg
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get the organization
      tags:
      - Orgs
    post:
      description: '## Overview

        This endpoint requires the [multi-org account](https://docs.datadoghq.com/account_management/multi_organization/)
        feature and must be enabled by [contacting support](https://docs.datadoghq.com/help/).

        ### ARGUMENTS

        * **`name`** [*required*]: The name of the new child-organization, limited
        to 32 characters.

        * **`subscription`** [*required*]: A JSON array of subscription type. Types
        available are **trial**, **free**, and **pro**.

        * **`billing`** [*required*]: A JSON array of billing type. Note that only
        **parent_billing** is supported.


        Once a new child-organization is created, you can interact with it by using
        the **org.public_id**, **api_key.key**, and **application_key.hash** provided
        in the response.'
      operationId: CreateChildOrg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgCreateBody'
        description: Org object that needs to be created
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Create child-organization.
      tags:
      - Orgs
      x-codegen-request-body-name: body
  /api/v1/org/{public_id}:
    put:
      description: "## Overview\nUpdates the organization\n### ARGUMENTS\n* **`name`**\
        \ [*optional*]: The organization name.\n\n* **`settings`** [*optional*]: A\
        \ JSON array of settings. Settings include:\n\n  * **`saml`**: Set the boolean\
        \ property **enabled** to enable or disable single sign on with SAML. See\
        \ the [SAML documentation](https://docs.datadoghq.com/account_management/saml)\
        \ for more information about all SAML settings.\n\n  * **`saml_idp_initiated_login`**:\
        \ has one property **enabled** (boolean).\n\n  * **`saml_strict_mode`**: has\
        \ one property **enabled** (boolean).\n\n  * **`saml_autocreate_users_domains`**:\
        \ has two properties: **enabled** (boolean) and **domains** which is a list\
        \ of domains without the @ symbol."
      operationId: UpdateOrg
      parameters:
      - description: The public_id of the org you are operating with
        in: path
        name: public_id
        required: true
        schema:
          example: abc123
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Update the organization
      tags:
      - Orgs
      x-codegen-request-body-name: body
  /api/v1/org/{public_id}/idp_metadata:
    post:
      description: '## Overview

        There are a couple of options for updating the Identity Provider (IdP) metadata
        from your SAML IdP.

        * **Multipart Form-Data**: Post the IdP metadata file using a form post.

        ### Multipart Form-Data

        #### Headers

        * **`Content-Type: multipart/form-data`**

        #### Arguments

        * **`public_id`** [*required*]: The public id of the org you want to update
        metadata for.

        ### MultiPart Form Data Body

        * The encoded data for the IDP settings to upload

        #### Headers

        * **`Content-Type: multipart/form-data`**

        #### Arguments

        * The body must contain the contents of your IdP metadata XML file.'
      operationId: UploadIdPForOrg
      parameters:
      - description: The public_id of the org you are operating with
        in: path
        name: public_id
        required: true
        schema:
          example: abc123
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IdpFormData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error415'
          description: Unsupported Media Type
      summary: Upload IdP metadata
      tags:
      - Orgs
      x-codegen-request-body-name: body
  /api/v1/query:
    get:
      description: Query timeseries points.
      operationId: QueryMetrics
      parameters:
      - description: Start of the queried time period, seconds since the Unix epoch
        in: query
        name: from
        required: true
        schema:
          format: int64
          type: integer
      - description: End of the queried time period, seconds since the Unix epoch
        in: query
        name: to
        required: true
        schema:
          format: int64
          type: integer
      - description: Query string
        in: query
        name: query
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsQueryResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
      summary: Query timeseries points
      tags:
      - Metrics
  /api/v1/search:
    get:
      description: Search for metrics from the last 24 hours in Datadog.
      operationId: SearchMetrics
      parameters:
      - description: Query string to search metrics upon. Must be prefixed with `metrics:`
        in: query
        name: q
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricSearchResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      summary: Search metrics
      tags:
      - Metrics
  /api/v1/series:
    post:
      description: "The metrics end-point allows you to post time-series data that\
        \ can be graphed on Datadog\u2019s dashboards. The limit for compressed payloads\
        \ is 3.2 megabytes (3200000), and 62 megabytes (62914560) for decompressed\
        \ payloads.\n# Overhead:\nIf you\u2019re submitting metrics directly to the\
        \ Datadog API without using DogStatsD, expect:\n64 bits for the timestamp\
        \ 64 bits for the value 20 bytes for the metric names 50 bytes for the timeseries\
        \ The full payload is approximately ~ 100 bytes. However, with the DogStatsD\
        \ API, compression is applied, which reduces the payload size."
      operationId: SubmitMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsPayload'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error408'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error413'
          description: Payload too large
      summary: Submit metrics
      tags:
      - Metrics
      x-codegen-request-body-name: body
  /api/v1/slo:
    get:
      description: "### Overview\nGet multiple service level objective objects by\
        \ their IDs.\n### Arguments\n* **`ids`** [*required*]: A comma separated list\
        \ of the IDs of the service level\n  objectives objects (e.g. \"id1,id2,id3\"\
        )."
      operationId: GetSLOs
      parameters:
      - description: A comma separated list of the IDs of the service level objectives
          objects (e.g. "id1,id2,id3").
        in: query
        name: ids
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectiveListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get multiple service level objective objects by their IDs.
      tags:
      - SLO
    post:
      description: '### Overview

        Create a service level objective object.'
      operationId: CreateSLO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceLevelObjective'
        description: Service level objective request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectiveListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Create a service level objective object.
      tags:
      - SLO
      x-codegen-request-body-name: body
  /api/v1/slo/bulk_delete:
    post:
      description: '### Overview

        Delete (or partially delete) multiple service level objective objects.

        This endpoint facilitates deletion of one or more thresholds for one or more
        service level objective objects. If all thresholds are deleted, the service
        level objective object is deleted as well.'
      operationId: BulkPartialDeleteSLO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceLevelObjectivesBulkDelete'
        description: Thresholds by service level objective object ID
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectivesBulkDeleted'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Delete (or partially delete) multiple service level objective objects.
      tags:
      - SLO
      x-codegen-request-body-name: body
  /api/v1/slo/can_delete:
    get:
      description: '### Overview

        Check if an SLO can be safely deleted without disrupting dashboards for example.

        ### Arguments

        * **`ids`** [*required*]: The ID (csv) of the service level objective objects
        to check.'
      operationId: CheckCanDeleteSLO
      parameters:
      - description: A comma separated list of the IDs of the service level objectives
          objects (e.g. "id1,id2,id3").
        in: query
        name: ids
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCanDeleteServiceLevelObjectiveResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Check if SLOs can be safely deleted.
      tags:
      - SLO
  /api/v1/slo/{slo_id}:
    delete:
      description: '### Overview

        Delete the specified service level objective object.

        ### Arguments

        * **`slo_id`** [*required*]: The ID of the service level objective object'
      operationId: DeleteSLO
      parameters:
      - description: The id of the service level objective
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectiveDeleted'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not found
      summary: Delete the specified service level objective object.
      tags:
      - SLO
    get:
      description: '### Overview

        Get a service level objective object.

        ### Arguments

        * **`slo_id`** [*required*]: The ID of the service level objective object'
      operationId: GetSLO
      parameters:
      - description: The ID of the service level objective object
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectiveResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not found
      summary: Get a service level objective object
      tags:
      - SLO
    put:
      description: '### Overview

        Edit the specified service level objective object.

        ### Arguments

        * **`slo_id`** [*required*]: The ID of the service level objective object'
      operationId: EditSLO
      parameters:
      - description: The ID of the service level objective object
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceLevelObjective'
        description: The edited service level objective request object.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLevelObjectiveListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
      summary: Edit the specified service level objective
      tags:
      - SLO
      x-codegen-request-body-name: body
  /api/v1/slo/{slo_id}/history:
    get:
      description: '### Overview

        Get the SLO history data

        ### Arguments

        * **`slo_id`** [*required*]: The ID of the service level objective object

        * **`from_ts`** [*required*]: The `from` timestamp in epoch seconds for the
        query timeframe

        * **`to_ts`** [*required*]: The `to` timestamp in epoch seconds for the query
        timeframe'
      operationId: HistoryForSLO
      parameters:
      - description: The ID of the service level objective object
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      - description: The `from` timestamp for the query window in epoch seconds
        in: query
        name: from_ts
        required: true
        schema:
          type: string
      - description: The `to` timestamp for the query window in epoch seconds
        in: query
        name: to_ts
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryServiceLevelObjectiveResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get the history of the service level objective.
      tags:
      - SLO
  /api/v1/tags/hosts:
    get:
      description: '### Get Tags

        * **`source`** [*optional*, *default*= **users**]: The source of the tags
        (e.g. chef, puppet).'
      operationId: GetAllHostTags
      parameters:
      - description: When specified, filters host list to those tags with the specified
          source
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagToHosts'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication Error
      summary: Get a mapping of tags to hosts for your whole infrastrucutre
      tags:
      - Tags
  /api/v1/tags/hosts/{host_name}:
    delete:
      description: "### Remove Host Tags\n\n * **`source`** [*optional*, *default*=\
        \ **users**]: The source of the tags (e.g. chef, puppet)."
      operationId: RemoveHostTags
      parameters:
      - description: This endpoint allows you to remove all user-assigned tags for
          a single host.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: The source of the tags (e.g. chef, puppet). [Complete list of
          source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication Error
      summary: Remove Host Tags
      tags:
      - Tags
    get:
      description: "### Get Host Tags\n\n * **`source`** [*optional*, *default*= **users**]:\
        \ The source of the tags (e.g. chef, puppet)."
      operationId: GetHostTags
      parameters:
      - description: When specified, filters list of tags to those tags with the specified
          source.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: Source to filter
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication Error
      summary: Get list of tags for a specific hosts
      tags:
      - Tags
    post:
      description: "### Add Tags to Host\n\n * **`tags`** [*required*]: A list of\
        \ tags to apply to the host.\n\n * **`source`** [*optional*, *default*= **users**]:\
        \ The source of the tags (e.g. chef, puppet)."
      operationId: AddToHostTags
      parameters:
      - description: This endpoint allows you to add new tags to a host, optionally
          specifying where the tags came from.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: The source of the tags (e.g. chef, puppet). [Complete list of
          source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)
        in: query
        name: source
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostTags'
        description: Add tags to host
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication Error
      summary: Add tags to a host
      tags:
      - Tags
      x-codegen-request-body-name: body
    put:
      description: "### Update Host Tags\n\n * **`tags`** [*required*]: A list of\
        \ tags to apply to the host.\n\n * **`source`** [*optional*, *default*= **users**]:\
        \ The source of the tags (e.g. chef, puppet)."
      operationId: UpdateHostTags
      parameters:
      - description: This endpoint allows you to update/replace all in an integration
          source with those supplied in the request.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: The source of the tags (e.g. chef, puppet). [Complete list of
          source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)
        in: query
        name: source
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostTags'
        description: Add tags to host
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Authentication Error
      summary: Update a tags on a host
      tags:
      - Tags
      x-codegen-request-body-name: body
  /api/v1/usage/fargate:
    get:
      description: '### Overview

        Get hourly usage for [fargate](https://docs.datadoghq.com/integrations/ecs_fargate/).

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageFargate
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageFargateResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for fargate.
      tags:
      - Usage
  /api/v1/usage/hosts:
    get:
      description: '### Overview

        Get hourly usage for hosts and containers.

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageHosts
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageHostsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for hosts and containers.
      tags:
      - Usage
  /api/v1/usage/logs:
    get:
      description: '### Overview

        Get hourly usage for logs.

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageLogs
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageLogsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for logs.
      tags:
      - Usage
  /api/v1/usage/summary:
    get:
      description: '### Overview

        Get usage across your multi-org account.

        ### Arguments

        * **`start_month`** [*required*] Datetime in ISO-8601 format, UTC, precise
        to month: [YYYY-MM] for usage beginning in this month. Maximum of 15 months
        ago.

        * **`end_month`** [*optional*, *default* = **current_month-3d**] Datetime
        in ISO-8601 format, UTC, precise to month: [YYYY-MM] for usage ending this
        month.

        * **`include_org_details`** [*optional*, *default* = **true**] Include usage
        summaries for each sub-org.'
      operationId: GetUsageSummary
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM]
          for usage beginning in this month. Maximum of 15 months ago.'
        in: query
        name: start_month
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM]
          for usage ending this month.'
        in: query
        name: end_month
        required: false
        schema:
          format: date-time
          type: string
      - description: Include usage summaries for each sub-org.
        in: query
        name: include_org_details
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSummaryResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get usage across your multi-org account.
      tags:
      - Usage
  /api/v1/usage/synthetics:
    get:
      description: '### Overview

        Get hourly usage for [synthetics](https://docs.datadoghq.com/synthetics/).

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageSynthetics
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSyntheticsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for synthetics.
      tags:
      - Usage
  /api/v1/usage/timeseries:
    get:
      description: '### Overview

        Get hourly usage for [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/).

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageTimeseries
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTimeseriesResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for custom metrics.
      tags:
      - Usage
  /api/v1/usage/top_avg_metrics:
    get:
      description: '### Overview

        Get top [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/)
        by hourly average.

        ### Arguments

        * **`month`** [*required*] Datetime in ISO-8601 format, UTC, precise to month:
        [YYYY-MM] for usage beginning at this hour.

        * **`names`** [*optional*, *default* = **None**] Comma-separated list of metric
        names.'
      operationId: GetUsageTopAvgMetrics
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM]
          for usage beginning at this hour.'
        in: query
        name: month
        required: true
        schema:
          format: date-time
          type: string
      - description: Comma-separated list of metric names.
        in: query
        name: names
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTopAvgMetricsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get top custom metrics by hourly average.
      tags:
      - Usage
  /api/v1/usage/traces:
    get:
      description: '### Overview

        Get hourly usage for trace search.

        ### Arguments

        * **`start_hr`** [*required*] Datetime in ISO-8601 format, UTC, precise to
        hour: [YYYY-MM-DDThh] for usage beginning at this hour

        * **`end_hr`** [*optional*, *default* = **1d+start_hr**] Datetime in ISO-8601
        format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending BEFORE this
        hour'
      operationId: GetUsageTrace
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTraceResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '401':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
      summary: Get hourly usage for trace search.
      tags:
      - Usage
  /api/v1/user:
    get:
      description: '### Overview

        Get all users for your organization.

        ### Arguments

        This endpoint takes no JSON argument.'
      operationId: GetAllUsers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Get all users
      tags:
      - Users
    post:
      description: "### Overview\nCreate a user for your organization.\n### Arguments\n\
        * **`handle`** [*required*]: The user handle, must be a valid email.\n* **`name`**\
        \ [*optional*, *default*=**None**]: The name of the user.\n* **`access_role`**\
        \ [*optional*, *default*=**st**]: The access role of the user. Choose from:\n\
        \n  *  **st** (standard user),\n\n  *  **adm** (admin user),\n\n  *  **ro**\
        \ (read-only user).\n\n  **Note**: users can be created with admin access\
        \ role\n     only with application keys belonging to administrators."
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object that needs to be created
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Create user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v1/user/{user_handle}:
    delete:
      description: '### Overview

        Delete a user from an organization.


        **Note**: This endpoint can only be used with application keys belonging to
        administrators.

        ### Arguments

        * **`id`** [*required*]: The handle of the user.'
      operationId: DisableUser
      parameters:
      - description: The handle of the user
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      responses:
        '200':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/UserDisableResponse'
          description: User disabled
        '400':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Disable user
      tags:
      - Users
    get:
      description: '### Overview

        Get a user details.

        ### Arguments

        * **`user_handle`** [*required*]: The handle of the user.'
      operationId: GetUser
      parameters:
      - description: The id of the user
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK for get user
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Get user
      tags:
      - Users
    put:
      description: "### Overview\nUpdate a user informations.\n\n**Note**: It can\
        \ only be used with application keys belonging to administrators.\n### Arguments\n\
        * **`id`** [*required*]: The handle of the user.\n* **`name`** [*optional*,\
        \ *default*=**None**]: The new name of the user.\n* **`email`** [*optional*,\
        \ *default*=**None**]: The new email of the user.\n* **`disabled`** [*optional*,\
        \ *default*=**None**]: The new disabled status of the user.\n* **`access_role`**\
        \ [*optional*, *default*=**st**]: The access role of the user. Choose from:\n\
        \n  *  **st** (standard user)\n\n  *  **adm** (admin user)\n\n  *  **ro**\
        \ (read-only user)"
      operationId: UpdateUser
      parameters:
      - description: The id of the user
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Description of the update
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Authentication error
      summary: Update user
      tags:
      - Users
      x-codegen-request-body-name: body
security:
- apiKeyAuth: []
  appKeyAuth: []
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for our customers.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
tags:
- description: AWS Integration API
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-aws
  name: AWSIntegration
- description: AWS Logs Integration API
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-aws-logs
  name: AWSLogsIntegration
- description: Azure Integration API
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-azure
  name: AzureIntegration
- description: '[Interact with your dashboard lists](https://docs.datadoghq.com/monitors/downtimes)
    through the API to make it easier to organize, find, and share all of your dashboards
    with your team and organization.'
  name: DashboardLists
- description: '[Downtiming](https://docs.datadoghq.com/monitors/downtimes) gives
    you greater control over monitor notifications by allowing you to globally exclude
    scopes from alerting. Downtime settings, which can be scheduled with start and
    end times, prevent all alerting related to specified Datadog tags.'
  name: Downtimes
- description: 'The events service allows you to programatically post events to the
    event stream and fetch events from the event stream.

    Events are limited to 4000 characters. If an event is sent out with a message
    containing more than 4000 characters only the 4000 first characters are displayed.'
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#events
  name: Events
- description: GCP Integration API
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-gcp
  name: GCPIntegration
- description: Get information about your live hosts in Datadog.
  name: Hosts
- description: Get a list of IP prefixes belonging to Datadog
  name: IPRanges
- description: Manage your Datadog API and application keys.
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/api-app-keys/
  name: Keys
- description: Pipelines and processors operate on incoming logs, parsing and transforming
    them into structured attributes for easier querying.
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/logs/processing/
  name: LogsPipelines
- description: Post and query metrics data.
  name: Metrics
- description: Monitors allow you to watch a metric or check that you care about,
    notifying your team when some defined threshold is exceeded.
  name: Monitors
- description: Create, edit, and manage organizations.
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/multi_organization
  name: Orgs
- description: Create, get, edit, and delete service level objectives
  name: SLO
- description: 'Submit Service Check. [Read more about Service Check monitors.][1]
    [Read more about Process Check monitors.][2] [Read more about Network Check monitors.][3]
    [Read more about Custom Check monitors.][4]

    [1]: https://docs.datadoghq.com/monitors/monitor_types/host/?tab=checkalert [2]:
    https://docs.datadoghq.com/monitors/monitor_types/process_check/?tab=checkalert
    [3]: https://docs.datadoghq.com/monitors/monitor_types/network/?tab=checkalert
    [4]: https://docs.datadoghq.com/monitors/monitor_types/custom_check/?tab=checkalert'
  name: ServiceChecks
- description: Take graph snapshots using the API.
  name: Snapshots
- description: Get information about your tags as they pertain to your live hosts
    in Datadog.
  name: Tags
- description: View organization usage data.
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/billing/usage_details/
  name: Usage
- description: 'Create, edit, and disable users. [Read more about your team management][1]

    [1]: https://docs.datadoghq.com/account_management/team'
  name: Users
x-group-parameters: true
