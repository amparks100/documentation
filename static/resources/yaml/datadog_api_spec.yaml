openapi: 3.0.2
servers:
  - description: Datadog api server
    url: "https://api.datadoghq.com/api/{apiVersion}"
    variables:
      apiVersion:
        default: v2

info:
  title: Datadog Users V2
  description: Specification for Datadog Users API
  version: "2.0"
  termsOfService: "https://www.datadoghq.com/legal/terms/"
  contact:
    email: support@datadoghq.com
  license:
    name: Legal
    url: "https://www.datadoghq.com/legal"
externalDocs:
  description: Find out more about Datadog
  url: "https://www.datadoghq.com"
tags:
  - name: users
    description: Tags for all user-related apis
    externalDocs:
      description: Find out more at
      url: "https://docs.datadoghq.com/api/?lang=python#users"

components:
  schemas:
    # Temporary schemas that aren't templated
    RoleJSONAPIRelationshipArray:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["roles"]
              id:
                type: string
                format: uuid
                example: 00000000-0000-0000-0000-000000000000
    OrgJSONAPIRelationship:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: ["orgs"]
            id:
              type: string
              format: uuid
              example: 00000000-0000-0000-0000-000000000000


    # User
    UserJSONAPIType:
      type: string
      enum: ["users"]

    UserJSONAPIId:
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000

    UserJSONAPITypeId:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserJSONAPIType'
        id:
          $ref: '#/components/schemas/UserJSONAPIId'

    UserJSONAPIRelationship:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserJSONAPITypeId'

    UserJSONAPIRelationshipArray:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserJSONAPITypeId'

    UserJSONAPIDataCreate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserJSONAPIType'
        relationships:
          type: object
          properties:
            roles:
              $ref: '#/components/schemas/RoleJSONAPIRelationshipArray'
        attributes:
          type: object
          properties:
            handle:
              type: string
              description: Email address of the user
              format: email
            name:
              type: string
              description: Name of the user
            title:
              type: string
              description: Title of the user

    UserJSONAPIDataUpdate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserJSONAPIType'
        id:
          $ref: '#/components/schemas/UserJSONAPIId'
        attributes:
          type: object
          properties:
            disabled:
              type: boolean
              description: Has the user been disabled
            email:
              type: string
              description: Email address of user
              format: email
            name:
              type: string
              description: Name of the user

    UserJSONAPIDataRead:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserJSONAPIType'
        id:
          $ref: '#/components/schemas/UserJSONAPIId'
        relationships:
          type: object
          properties:
            org:
              $ref: '#/components/schemas/OrgJSONAPIRelationship'
            roles:
              $ref: '#/components/schemas/RoleJSONAPIRelationshipArray'
        attributes:
          type: object
          properties:
            allowed_login_methods:
              type: array
              description: How the user is able to login
              items: {"type":"string"}
            created_at:
              type: string
              description: Date when the user was created
              format: datetime
            disabled:
              type: boolean
              description: Has the user been disabled
            email:
              type: string
              description: Email address of user
              format: email
            handle:
              type: string
              description: Email address of the user
              format: email
            icon:
              type: string
              description: Path to an image representing the user
            name:
              type: string
              description: Name of the user
            status:
              type: string
              description: Summarize the User status
            title:
              type: string
              description: Title of the user
            verified:
              type: boolean
              description: Has the user verified their email address

    UserJSONAPICreateRequestBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserJSONAPIDataCreate'

    UserJSONAPICreateResponseBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserJSONAPIDataRead'

    UserJSONAPIResponseBodySingle:
      type: object
      properties:
        included:
          type: array
          items:
            anyOf:
              - $ref: './includes/schemas.yaml#/components/schemas/RoleResponse'
              - $ref: './includes/schemas.yaml#/components/schemas/PermissionsJSONAPISchemaSingle'
        data:
          $ref: '#/components/schemas/UserJSONAPIDataRead'


    # User Invitation
    UserInvitationJSONAPIType:
      type: string
      enum: ["user_invitations"]

    UserInvitationJSONAPIId:
      type: string
      format: uuid
      example: 00000000-0000-0000-0000-000000000000

    UserInvitationJSONAPITypeId:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserInvitationJSONAPIType'
        id:
          $ref: '#/components/schemas/UserInvitationJSONAPIId'

    UserInvitationJSONAPIRelationship:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationJSONAPITypeId'

    UserInvitationJSONAPIRelationshipArray:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInvitationJSONAPITypeId'

    UserInvitationJSONAPIDataCreate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserInvitationJSONAPIType'
        relationships:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserJSONAPIRelationship'
        attributes:
          type: object
          properties:
            login_method:
              type: string
              description: The login method included in the user invitation

    UserInvitationJSONAPIDataUpdate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserInvitationJSONAPIType'
        id:
          $ref: '#/components/schemas/UserInvitationJSONAPIId'

    UserInvitationJSONAPIDataRead:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserInvitationJSONAPIType'
        id:
          $ref: '#/components/schemas/UserInvitationJSONAPIId'
        relationships:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserJSONAPIRelationship'
        attributes:
          type: object
          properties:
            created_at:
              type: string
              description: When the user invitation was created
              format: datetime
            expires_at:
              type: string
              description: When the user invitation will expire
              format: datetime
            invite_type:
              type: string
              description: The type of invitation sent to the user
            login_method:
              type: string
              description: The login method included in the user invitation

    UserInvitationJSONAPIRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInvitationJSONAPIDataCreate'

    UserInvitationJSONAPIResponseMany:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserInvitationJSONAPIDataRead'

    UserInvitationJSONAPIResponseSingle:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserInvitationJSONAPIDataRead'

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Returns a list of users
      parameters:
        - $ref: './includes/parameters.yaml#/components/parameters/page%5Bsize%5D'
        - $ref: './includes/parameters.yaml#/components/parameters/page%5Bnumber%5D'
        - $ref: './includes/parameters.yaml#/components/parameters/sort_field'
        - $ref: './includes/parameters.yaml#/components/parameters/sort_dir'
        - $ref: './includes/parameters.yaml#/components/parameters/filter'
        - $ref: './includes/parameters.yaml#/components/parameters/filter_user_status'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/UsersJSONAPISchema'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'
    post:
      tags:
        - users
      summary: Create a user
      description: Create a user. Returns the created user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserJSONAPICreateRequestBody'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserJSONAPICreateResponseBody'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'
        '409':
          description: API conflict error
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/409'
  /users/{user_uuid}:
    parameters:
      - name: user_uuid
        in: path
        description: uuid for user
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      summary: Get a specific user by uuid
      description: Returns a single user by their uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserJSONAPIResponseBodySingle'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'
    # TODO: put is unused
    # put:
    #   tags:
    #     - users
    #   summary: Update a role
    #   description: Updates an existing role. Returns the updated role
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: './includes/schemas.yaml#/components/schemas/single_role'
    #   responses:
    #     '201':
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #             $ref: './includes/schemas.yaml#/components/schemas/User'
    #     '400':
    #       description: Bad request.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: './includes/schemas.yaml#/components/schemas/400'
    #     '403':
    #       description: Not Authorized Error.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: './includes/schemas.yaml#/components/schemas/403'
    #     '404':
    #       description: Not Found.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: './includes/schemas.yaml#/components/schemas/404'
    delete:
      tags:
        - users
      summary: Delete a user
      description: Deletes a specific user by their uuid.
      responses:
        '204':
          description: Success
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/404'

  /users/{handle}/application_keys:
    parameters:
      - name: handle
        in: path
        description: handle for user
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Gets the user's application keys
      description: Returns a list of application keys of the user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/ApplicationKeysSchema'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'

  /users/{user_uuid}/orgs:
    parameters:
      - name: user_uuid
        in: path
        description: uuid for user
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Gets the user's and its orgs
      description: Returns the user information and all of the orgs of that user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/UsersOrgsSchema'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'

  /users/{user_id}/permissions:
    parameters:
      - name: user_id
        in: path
        description: UUID for user
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Get a user's effective permission set
      description: |
        Returns a list of the user's permissions granted by the roles the user is assigned to.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/UsersPermissionsSchema'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'

  /user_invitations:
    post:
      tags:
        - users
      summary: Send invitation emails to users
      description: |
        Sends emails to one or more users inviting them to join the organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationJSONAPIRequestBody'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationJSONAPIResponseMany'

  /user_invitations/{user_invitation_uuid}:
    parameters:
      - name: user_invitation_uuid
        in: path
        description: UUID for user invitation
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Get a user invitation
      description: |
        Returns a single User Invitation by its uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitationJSONAPIResponseSingle'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/400'
        '403':
          description: Not Authorized Error.
          content:
            application/json:
              schema:
                $ref: './includes/schemas.yaml#/components/schemas/403'